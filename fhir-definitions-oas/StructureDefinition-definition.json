{
  "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
  "properties": {
    "resourceType": {
      "description": "This is a StructureDefinition resource",
      "enum": [
        "StructureDefinition"
      ]
    },
    "id": {
      "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
      "type": "string",
      "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
    },
    "meta": {
      "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource.",
      "properties": {
        "id": {
          "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "items": {
            "description": "Optional Extension Element - found in all resources.",
            "properties": {
              "id": {
                "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "extension": {
                "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "type": "array",
                "items": {}
              },
              "url": {
                "description": "Source of the definition for the extension code - a logical name or a URL.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_url": {
                "description": "Extensions for url",
                "properties": {
                  "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  }
                },
                "additionalProperties": false
              },
              "valueBase64Binary": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                "type": "string"
              },
              "_valueBase64Binary": {
                "description": "Extensions for valueBase64Binary",
                "additionalProperties": false
              },
              "valueBoolean": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_valueBoolean": {
                "description": "Extensions for valueBoolean",
                "additionalProperties": false
              },
              "valueCanonical": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_valueCanonical": {
                "description": "Extensions for valueCanonical",
                "additionalProperties": false
              },
              "valueCode": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                "type": "string"
              },
              "_valueCode": {
                "description": "Extensions for valueCode",
                "additionalProperties": false
              },
              "valueDate": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                "type": "string"
              },
              "_valueDate": {
                "description": "Extensions for valueDate",
                "additionalProperties": false
              },
              "valueDateTime": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                "type": "string"
              },
              "_valueDateTime": {
                "description": "Extensions for valueDateTime",
                "additionalProperties": false
              },
              "valueDecimal": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                "type": "number"
              },
              "_valueDecimal": {
                "description": "Extensions for valueDecimal",
                "additionalProperties": false
              },
              "valueId": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                "type": "string"
              },
              "_valueId": {
                "description": "Extensions for valueId",
                "additionalProperties": false
              },
              "valueInstant": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                "type": "string"
              },
              "_valueInstant": {
                "description": "Extensions for valueInstant",
                "additionalProperties": false
              },
              "valueInteger": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number"
              },
              "_valueInteger": {
                "description": "Extensions for valueInteger",
                "additionalProperties": false
              },
              "valueMarkdown": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_valueMarkdown": {
                "description": "Extensions for valueMarkdown",
                "additionalProperties": false
              },
              "valueOid": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                "type": "string"
              },
              "_valueOid": {
                "description": "Extensions for valueOid",
                "additionalProperties": false
              },
              "valuePositiveInt": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^[1-9][0-9]*$",
                "type": "number"
              },
              "_valuePositiveInt": {
                "description": "Extensions for valuePositiveInt",
                "additionalProperties": false
              },
              "valueString": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_valueString": {
                "description": "Extensions for valueString",
                "additionalProperties": false
              },
              "valueTime": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                "type": "string"
              },
              "_valueTime": {
                "description": "Extensions for valueTime",
                "additionalProperties": false
              },
              "valueUnsignedInt": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number"
              },
              "_valueUnsignedInt": {
                "description": "Extensions for valueUnsignedInt",
                "additionalProperties": false
              },
              "valueUri": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_valueUri": {
                "description": "Extensions for valueUri",
                "additionalProperties": false
              },
              "valueUrl": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_valueUrl": {
                "description": "Extensions for valueUrl",
                "additionalProperties": false
              },
              "valueUuid": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                "type": "string"
              },
              "_valueUuid": {
                "description": "Extensions for valueUuid",
                "additionalProperties": false
              },
              "valueAddress": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "use": {
                    "description": "The purpose of this address.",
                    "enum": [
                      "home",
                      "work",
                      "temp",
                      "old",
                      "billing"
                    ]
                  },
                  "_use": {
                    "description": "Extensions for use",
                    "additionalProperties": false
                  },
                  "type": {
                    "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care-of addresses). Most addresses are both.",
                    "enum": [
                      "postal",
                      "physical",
                      "both"
                    ]
                  },
                  "_type": {
                    "description": "Extensions for type",
                    "additionalProperties": false
                  },
                  "text": {
                    "description": "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                  },
                  "_text": {
                    "description": "Extensions for text",
                    "additionalProperties": false
                  },
                  "line": {
                    "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information.",
                    "items": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "type": "array"
                  },
                  "_line": {
                    "description": "Extensions for line",
                    "items": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "city": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_city": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "district": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_district": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "state": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_state": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "postalCode": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_postalCode": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "country": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_country": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "period": {
                    "description": "Time period when address was/is in use.",
                    "properties": {
                      "id": {
                        "pattern": "^[ \\r\\n\\t\\S]+$",
                        "type": "string",
                        "description": "A sequence of Unicode characters"
                      },
                      "extension": {
                        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                        "type": "array",
                        "items": {}
                      },
                      "start": {
                        "description": "The start of the period. The boundary is inclusive.",
                        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                        "type": "string"
                      },
                      "_start": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "end": {
                        "description": "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time.",
                        "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                        "type": "string"
                      },
                      "_end": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueAge": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                      "<",
                      "<=",
                      ">=",
                      ">"
                    ]
                  },
                  "_comparator": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "unit": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_unit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_system": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_code": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueAnnotation": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "authorReference": {
                    "description": "The individual responsible for making the annotation.",
                    "properties": {
                      "id": {
                        "pattern": "^[ \\r\\n\\t\\S]+$",
                        "type": "string",
                        "description": "A sequence of Unicode characters"
                      },
                      "extension": {
                        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                        "type": "array",
                        "items": {}
                      },
                      "reference": {
                        "pattern": "^[ \\r\\n\\t\\S]+$",
                        "type": "string",
                        "description": "A sequence of Unicode characters"
                      },
                      "_reference": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "type": {
                        "description": "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.\n\nThe type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources).",
                        "pattern": "^\\S*$",
                        "type": "string"
                      },
                      "_type": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "identifier": {
                        "description": "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference.",
                        "properties": {
                          "id": {
                            "pattern": "^[ \\r\\n\\t\\S]+$",
                            "type": "string",
                            "description": "A sequence of Unicode characters"
                          },
                          "extension": {
                            "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                            "type": "array",
                            "items": {}
                          },
                          "use": {
                            "description": "The purpose of this identifier.",
                            "enum": [
                              "usual",
                              "official",
                              "temp",
                              "secondary",
                              "old"
                            ]
                          },
                          "_use": {
                            "description": "Base definition for all elements in a resource.",
                            "additionalProperties": false
                          },
                          "type": {
                            "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose.",
                            "properties": {
                              "id": {
                                "pattern": "^[ \\r\\n\\t\\S]+$",
                                "type": "string",
                                "description": "A sequence of Unicode characters"
                              },
                              "extension": {
                                "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                                "type": "array",
                                "items": {}
                              },
                              "coding": {
                                "description": "A reference to a code defined by a terminology system.",
                                "items": {
                                  "description": "A reference to a code defined by a terminology system.",
                                  "properties": {
                                    "id": {
                                      "pattern": "^[ \\r\\n\\t\\S]+$",
                                      "type": "string",
                                      "description": "A sequence of Unicode characters"
                                    },
                                    "extension": {
                                      "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                                      "type": "array",
                                      "items": {}
                                    },
                                    "system": {
                                      "description": "The identification of the code system that defines the meaning of the symbol in the code.",
                                      "pattern": "^\\S*$",
                                      "type": "string"
                                    },
                                    "_system": {
                                      "description": "Base definition for all elements in a resource.",
                                      "additionalProperties": false
                                    },
                                    "version": {
                                      "pattern": "^[ \\r\\n\\t\\S]+$",
                                      "type": "string",
                                      "description": "A sequence of Unicode characters"
                                    },
                                    "_version": {
                                      "description": "Base definition for all elements in a resource.",
                                      "additionalProperties": false
                                    },
                                    "code": {
                                      "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post-coordination).",
                                      "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                                      "type": "string"
                                    },
                                    "_code": {
                                      "description": "Base definition for all elements in a resource.",
                                      "additionalProperties": false
                                    },
                                    "display": {
                                      "pattern": "^[ \\r\\n\\t\\S]+$",
                                      "type": "string",
                                      "description": "A sequence of Unicode characters"
                                    },
                                    "_display": {
                                      "description": "Base definition for all elements in a resource.",
                                      "additionalProperties": false
                                    },
                                    "userSelected": {
                                      "description": "Indicates that this coding was chosen by a user directly - e.g. off a pick list of available items (codes or displays).",
                                      "pattern": "^true|false$",
                                      "type": "boolean"
                                    },
                                    "_userSelected": {
                                      "description": "Base definition for all elements in a resource.",
                                      "additionalProperties": false
                                    }
                                  },
                                  "additionalProperties": false
                                },
                                "type": "array"
                              },
                              "text": {
                                "pattern": "^[ \\r\\n\\t\\S]+$",
                                "type": "string",
                                "description": "A sequence of Unicode characters"
                              },
                              "_text": {
                                "description": "Base definition for all elements in a resource.",
                                "additionalProperties": false
                              }
                            },
                            "additionalProperties": false
                          },
                          "system": {
                            "description": "Establishes the namespace for the value - that is, a URL that describes a set values that are unique.",
                            "pattern": "^\\S*$",
                            "type": "string"
                          },
                          "_system": {
                            "description": "Base definition for all elements in a resource.",
                            "additionalProperties": false
                          },
                          "value": {
                            "pattern": "^[ \\r\\n\\t\\S]+$",
                            "type": "string",
                            "description": "A sequence of Unicode characters"
                          },
                          "_value": {
                            "description": "Base definition for all elements in a resource.",
                            "additionalProperties": false
                          },
                          "period": {
                            "description": "Time period during which identifier is/was valid for use.",
                            "additionalProperties": false
                          },
                          "assigner": {
                            "description": "Organization that issued/manages the identifier.",
                            "additionalProperties": false
                          }
                        },
                        "additionalProperties": false
                      },
                      "display": {
                        "pattern": "^[ \\r\\n\\t\\S]+$",
                        "type": "string",
                        "description": "A sequence of Unicode characters"
                      },
                      "_display": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "authorString": {
                    "description": "The individual responsible for making the annotation.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                  },
                  "_authorString": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "time": {
                    "description": "Indicates when this particular annotation was made.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                  },
                  "_time": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "text": {
                    "description": "The text of the annotation in markdown format.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                  },
                  "_text": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueAttachment": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "contentType": {
                    "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_contentType": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "language": {
                    "description": "The human language of the content. The value can be any valid value according to BCP 47.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_language": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "data": {
                    "description": "The actual data of the attachment - a sequence of bytes, base64 encoded.",
                    "type": "string"
                  },
                  "_data": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "url": {
                    "description": "A location where the data can be accessed.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_url": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "size": {
                    "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done).",
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number"
                  },
                  "_size": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "hash": {
                    "description": "The calculated hash of the data using SHA-1. Represented using base64.",
                    "type": "string"
                  },
                  "_hash": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "title": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_title": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "creation": {
                    "description": "The date that the attachment was first created.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                  },
                  "_creation": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueCodeableConcept": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "additionalProperties": false
              },
              "valueCoding": {
                "description": "A reference to a code defined by a terminology system.",
                "additionalProperties": false
              },
              "valueContactPoint": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "system": {
                    "description": "Telecommunications form for contact point - what communications system is required to make use of the contact.",
                    "enum": [
                      "phone",
                      "fax",
                      "email",
                      "pager",
                      "url",
                      "sms",
                      "other"
                    ]
                  },
                  "_system": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "value": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "use": {
                    "description": "Identifies the purpose for the contact point.",
                    "enum": [
                      "home",
                      "work",
                      "temp",
                      "old",
                      "mobile"
                    ]
                  },
                  "_use": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "rank": {
                    "description": "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                  },
                  "_rank": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "period": {
                    "description": "Time period when the contact point was/is in use.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueCount": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                      "<",
                      "<=",
                      ">=",
                      ">"
                    ]
                  },
                  "_comparator": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "unit": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_unit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_system": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_code": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueDistance": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                      "<",
                      "<=",
                      ">=",
                      ">"
                    ]
                  },
                  "_comparator": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "unit": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_unit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_system": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_code": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueDuration": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                      "<",
                      "<=",
                      ">=",
                      ">"
                    ]
                  },
                  "_comparator": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "unit": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_unit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_system": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_code": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueHumanName": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "use": {
                    "description": "Identifies the purpose for this name.",
                    "enum": [
                      "usual",
                      "official",
                      "temp",
                      "nickname",
                      "anonymous",
                      "old",
                      "maiden"
                    ]
                  },
                  "_use": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "text": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_text": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "family": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_family": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "given": {
                    "description": "Given name.",
                    "type": "array",
                    "items": {}
                  },
                  "_given": {
                    "description": "Extensions for given",
                    "type": "array",
                    "items": {}
                  },
                  "prefix": {
                    "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name.",
                    "type": "array",
                    "items": {}
                  },
                  "_prefix": {
                    "description": "Extensions for prefix",
                    "type": "array",
                    "items": {}
                  },
                  "suffix": {
                    "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name.",
                    "type": "array",
                    "items": {}
                  },
                  "_suffix": {
                    "description": "Extensions for suffix",
                    "type": "array",
                    "items": {}
                  },
                  "period": {
                    "description": "Indicates the period of time when this name was valid for the named person.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueIdentifier": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "additionalProperties": false
              },
              "valueMoney": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "value": {
                    "description": "Numerical value (with implicit precision).",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "currency": {
                    "description": "ISO 4217 Currency Code.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_currency": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valuePeriod": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "additionalProperties": false
              },
              "valueQuantity": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "value": {
                    "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_value": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "comparator": {
                    "description": "How the value should be understood and represented - whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value.",
                    "enum": [
                      "<",
                      "<=",
                      ">=",
                      ">"
                    ]
                  },
                  "_comparator": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "unit": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_unit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "system": {
                    "description": "The identification of the system that provides the coded form of the unit.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_system": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "code": {
                    "description": "A computer processable form of the unit in some unit representation system.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_code": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueRange": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "low": {
                    "description": "The low limit. The boundary is inclusive.",
                    "additionalProperties": false
                  },
                  "high": {
                    "description": "The high limit. The boundary is inclusive.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueRatio": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "numerator": {
                    "description": "The value of the numerator.",
                    "additionalProperties": false
                  },
                  "denominator": {
                    "description": "The value of the denominator.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueReference": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "additionalProperties": false
              },
              "valueSampledData": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "origin": {
                    "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series.",
                    "additionalProperties": false
                  },
                  "period": {
                    "description": "The length of time between sampling times, measured in milliseconds.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_period": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "factor": {
                    "description": "A correction factor that is applied to the sampled data points before they are added to the origin.",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_factor": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "lowerLimit": {
                    "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit).",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_lowerLimit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "upperLimit": {
                    "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit).",
                    "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                    "type": "number"
                  },
                  "_upperLimit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "dimensions": {
                    "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced - all the sample points for a point in time will be recorded at once.",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                  },
                  "_dimensions": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "data": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_data": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false,
                "required": [
                  "origin"
                ]
              },
              "valueSignature": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "type": {
                    "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document.",
                    "type": "array",
                    "items": {}
                  },
                  "when": {
                    "description": "When the digital signature was signed.",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                    "type": "string"
                  },
                  "_when": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "who": {
                    "description": "A reference to an application-usable description of the identity that signed  (e.g. the signature used their private key).",
                    "additionalProperties": false
                  },
                  "onBehalfOf": {
                    "description": "A reference to an application-usable description of the identity that is represented by the signature.",
                    "additionalProperties": false
                  },
                  "targetFormat": {
                    "description": "A mime type that indicates the technical format of the target resources signed by the signature.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_targetFormat": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "sigFormat": {
                    "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc.",
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string"
                  },
                  "_sigFormat": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "data": {
                    "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty.",
                    "type": "string"
                  },
                  "_data": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false,
                "required": [
                  "type",
                  "who"
                ]
              },
              "valueTiming": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "array",
                    "items": {}
                  },
                  "event": {
                    "description": "Identifies specific times when the event occurs.",
                    "items": {
                      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                      "type": "string",
                      "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
                    },
                    "type": "array"
                  },
                  "_event": {
                    "description": "Extensions for event",
                    "type": "array",
                    "items": {}
                  },
                  "repeat": {
                    "description": "A set of rules that describe when the event is scheduled.",
                    "properties": {
                      "id": {
                        "pattern": "^[ \\r\\n\\t\\S]+$",
                        "type": "string",
                        "description": "A sequence of Unicode characters"
                      },
                      "extension": {
                        "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                        "type": "array",
                        "items": {}
                      },
                      "modifierExtension": {
                        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                        "type": "array",
                        "items": {}
                      },
                      "boundsDuration": {
                        "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
                        "additionalProperties": false
                      },
                      "boundsRange": {
                        "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
                        "additionalProperties": false
                      },
                      "boundsPeriod": {
                        "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule.",
                        "additionalProperties": false
                      },
                      "count": {
                        "description": "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values.",
                        "pattern": "^[1-9][0-9]*$",
                        "type": "number"
                      },
                      "_count": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "countMax": {
                        "description": "If present, indicates that the count is a range - so to perform the action between [count] and [countMax] times.",
                        "pattern": "^[1-9][0-9]*$",
                        "type": "number"
                      },
                      "_countMax": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "duration": {
                        "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration.",
                        "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                        "type": "number"
                      },
                      "_duration": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "durationMax": {
                        "description": "If present, indicates that the duration is a range - so to perform the action between [duration] and [durationMax] time length.",
                        "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                        "type": "number"
                      },
                      "_durationMax": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "durationUnit": {
                        "description": "The units of time for the duration, in UCUM units.",
                        "enum": [
                          "s",
                          "min",
                          "h",
                          "d",
                          "wk",
                          "mo",
                          "a"
                        ]
                      },
                      "_durationUnit": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "frequency": {
                        "description": "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency.",
                        "pattern": "^[1-9][0-9]*$",
                        "type": "number"
                      },
                      "_frequency": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "frequencyMax": {
                        "description": "If present, indicates that the frequency is a range - so to repeat between [frequency] and [frequencyMax] times within the period or period range.",
                        "pattern": "^[1-9][0-9]*$",
                        "type": "number"
                      },
                      "_frequencyMax": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "period": {
                        "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length.",
                        "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                        "type": "number"
                      },
                      "_period": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "periodMax": {
                        "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3-5 days.",
                        "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                        "type": "number"
                      },
                      "_periodMax": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "periodUnit": {
                        "description": "The units of time for the period in UCUM units.",
                        "enum": [
                          "s",
                          "min",
                          "h",
                          "d",
                          "wk",
                          "mo",
                          "a"
                        ]
                      },
                      "_periodUnit": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      },
                      "dayOfWeek": {
                        "description": "If one or more days of week is provided, then the action happens only on the specified day(s).",
                        "items": {
                          "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                          "type": "string",
                          "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
                        },
                        "type": "array"
                      },
                      "_dayOfWeek": {
                        "description": "Extensions for dayOfWeek",
                        "type": "array",
                        "items": {}
                      },
                      "timeOfDay": {
                        "description": "Specified time of day for action to take place.",
                        "items": {
                          "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                          "type": "string",
                          "description": "A time during the day, with no date specified"
                        },
                        "type": "array"
                      },
                      "_timeOfDay": {
                        "description": "Extensions for timeOfDay",
                        "type": "array",
                        "items": {}
                      },
                      "when": {
                        "description": "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur.",
                        "items": {
                          "enum": [
                            "MORN",
                            "MORN.early",
                            "MORN.late",
                            "NOON",
                            "AFT",
                            "AFT.early",
                            "AFT.late",
                            "EVE",
                            "EVE.early",
                            "EVE.late",
                            "NIGHT",
                            "PHS",
                            "HS",
                            "WAKE",
                            "C",
                            "CM",
                            "CD",
                            "CV",
                            "AC",
                            "ACM",
                            "ACD",
                            "ACV",
                            "PC",
                            "PCM",
                            "PCD",
                            "PCV"
                          ]
                        },
                        "type": "array"
                      },
                      "_when": {
                        "description": "Extensions for when",
                        "type": "array",
                        "items": {}
                      },
                      "offset": {
                        "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event.",
                        "pattern": "^[0]|([1-9][0-9]*)$",
                        "type": "number"
                      },
                      "_offset": {
                        "description": "Base definition for all elements in a resource.",
                        "additionalProperties": false
                      }
                    },
                    "additionalProperties": false
                  },
                  "code": {
                    "description": "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code).",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueContactDetail": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "name": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_name": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "telecom": {
                    "description": "The contact details for the individual (if a name was provided) or the organization.",
                    "items": {
                      "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "additionalProperties": false
              },
              "valueContributor": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "type": {
                    "description": "The type of contributor.",
                    "enum": [
                      "author",
                      "editor",
                      "reviewer",
                      "endorser"
                    ]
                  },
                  "_type": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "name": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_name": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "contact": {
                    "description": "Contact details to assist a user in finding and communicating with the contributor.",
                    "items": {
                      "description": "Specifies contact information for a person or organization.",
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "additionalProperties": false
              },
              "valueDataRequirement": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "type": {
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string",
                    "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
                  },
                  "_type": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "profile": {
                    "description": "The profile of the required data, specified as the uri of the profile definition.",
                    "items": {
                      "pattern": "^\\S*$",
                      "type": "string",
                      "description": "A URI that is a reference to a canonical URL on a FHIR resource"
                    },
                    "type": "array"
                  },
                  "subjectCodeableConcept": {
                    "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
                    "additionalProperties": false
                  },
                  "subjectReference": {
                    "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed.",
                    "additionalProperties": false
                  },
                  "mustSupport": {
                    "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details).",
                    "type": "array",
                    "items": {}
                  },
                  "_mustSupport": {
                    "description": "Extensions for mustSupport",
                    "type": "array",
                    "items": {}
                  },
                  "codeFilter": {
                    "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed.",
                    "items": {
                      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                      "properties": {
                        "id": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "extension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                          "type": "array",
                          "items": {}
                        },
                        "modifierExtension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                          "type": "array",
                          "items": {}
                        },
                        "path": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "_path": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "searchParam": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "_searchParam": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "valueSet": {
                          "pattern": "^\\S*$",
                          "type": "string",
                          "description": "A URI that is a reference to a canonical URL on a FHIR resource"
                        },
                        "code": {
                          "description": "The codes for the code filter. If values are given, the filter will return only those data items for which the code-valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes.",
                          "type": "array",
                          "items": {}
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "dateFilter": {
                    "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed.",
                    "items": {
                      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                      "properties": {
                        "id": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "extension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                          "type": "array",
                          "items": {}
                        },
                        "modifierExtension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                          "type": "array",
                          "items": {}
                        },
                        "path": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "_path": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "searchParam": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "_searchParam": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "valueDateTime": {
                          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
                          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                          "type": "string"
                        },
                        "_valueDateTime": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "valuePeriod": {
                          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
                          "additionalProperties": false
                        },
                        "valueDuration": {
                          "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now.",
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "limit": {
                    "description": "Specifies a maximum number of results that are required (uses the _count search parameter).",
                    "pattern": "^[1-9][0-9]*$",
                    "type": "number"
                  },
                  "_limit": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "sort": {
                    "description": "Specifies the order of the results to be returned.",
                    "items": {
                      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                      "properties": {
                        "id": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "extension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                          "type": "array",
                          "items": {}
                        },
                        "modifierExtension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                          "type": "array",
                          "items": {}
                        },
                        "path": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "_path": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "direction": {
                          "description": "The direction of the sort, ascending or descending.",
                          "enum": [
                            "ascending",
                            "descending"
                          ]
                        },
                        "_direction": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": "array"
                  }
                },
                "additionalProperties": false
              },
              "valueExpression": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "description": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_description": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "name": {
                    "description": "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined.",
                    "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                    "type": "string"
                  },
                  "_name": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "language": {
                    "description": "The media type of the language for the expression.",
                    "enum": [
                      "text/cql",
                      "text/fhirpath",
                      "application/x-fhir-query"
                    ]
                  },
                  "_language": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "expression": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_expression": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "reference": {
                    "description": "A URI that defines where the expression is found.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_reference": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueParameterDefinition": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "name": {
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string",
                    "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
                  },
                  "_name": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "use": {
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string",
                    "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
                  },
                  "_use": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "min": {
                    "description": "The minimum number of times this parameter SHALL appear in the request or response.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                  },
                  "_min": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "max": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_max": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "documentation": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_documentation": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "type": {
                    "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                    "type": "string",
                    "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
                  },
                  "_type": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "profile": {
                    "pattern": "^\\S*$",
                    "type": "string",
                    "description": "A URI that is a reference to a canonical URL on a FHIR resource"
                  }
                },
                "additionalProperties": false
              },
              "valueRelatedArtifact": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "type": {
                    "description": "The type of relationship to the related artifact.",
                    "enum": [
                      "documentation",
                      "justification",
                      "citation",
                      "predecessor",
                      "successor",
                      "derived-from",
                      "depends-on",
                      "composed-of"
                    ]
                  },
                  "_type": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "label": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_label": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "display": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_display": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "citation": {
                    "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format.",
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string"
                  },
                  "_citation": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "url": {
                    "description": "A url for the artifact that can be followed to access the actual content.",
                    "pattern": "^\\S*$",
                    "type": "string"
                  },
                  "_url": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "document": {
                    "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element.",
                    "additionalProperties": false
                  },
                  "resource": {
                    "pattern": "^\\S*$",
                    "type": "string",
                    "description": "A URI that is a reference to a canonical URL on a FHIR resource"
                  }
                },
                "additionalProperties": false
              },
              "valueTriggerDefinition": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "type": {
                    "description": "The type of triggering event.",
                    "enum": [
                      "named-event",
                      "periodic",
                      "data-changed",
                      "data-added",
                      "data-modified",
                      "data-removed",
                      "data-accessed",
                      "data-access-ended"
                    ]
                  },
                  "_type": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "name": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_name": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "timingTiming": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "additionalProperties": false
                  },
                  "timingReference": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "additionalProperties": false
                  },
                  "timingDate": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                    "type": "string"
                  },
                  "_timingDate": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "timingDateTime": {
                    "description": "The timing of the event (if this is a periodic trigger).",
                    "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                    "type": "string"
                  },
                  "_timingDateTime": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "data": {
                    "description": "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true.",
                    "items": {
                      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "condition": {
                    "description": "A boolean-valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueUsageContext": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "code": {
                    "description": "A reference to a code defined by a terminology system.",
                    "additionalProperties": false
                  },
                  "valueCodeableConcept": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "additionalProperties": false
                  },
                  "valueQuantity": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "additionalProperties": false
                  },
                  "valueRange": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "additionalProperties": false
                  },
                  "valueReference": {
                    "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false,
                "required": [
                  "code"
                ]
              },
              "valueDosage": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "array",
                    "items": {}
                  },
                  "sequence": {
                    "description": "Indicates the order in which the dosage instructions should be applied or interpreted.",
                    "pattern": "^-?([0]|([1-9][0-9]*))$",
                    "type": "number"
                  },
                  "_sequence": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "text": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_text": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "additionalInstruction": {
                    "description": "Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\").",
                    "items": {
                      "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "patientInstruction": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_patientInstruction": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "timing": {
                    "description": "When medication should be administered.",
                    "additionalProperties": false
                  },
                  "asNeededBoolean": {
                    "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept).",
                    "pattern": "^true|false$",
                    "type": "boolean"
                  },
                  "_asNeededBoolean": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "asNeededCodeableConcept": {
                    "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                    "additionalProperties": false
                  },
                  "site": {
                    "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                    "additionalProperties": false
                  },
                  "route": {
                    "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                    "additionalProperties": false
                  },
                  "method": {
                    "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                    "additionalProperties": false
                  },
                  "doseAndRate": {
                    "description": "The amount of medication administered.",
                    "items": {
                      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
                      "properties": {
                        "id": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "extension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                          "type": "array",
                          "items": {}
                        },
                        "modifierExtension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                          "type": "array",
                          "items": {}
                        },
                        "type": {
                          "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                          "additionalProperties": false
                        },
                        "doseRange": {
                          "description": "Amount of medication per dose.",
                          "additionalProperties": false
                        },
                        "doseQuantity": {
                          "description": "Amount of medication per dose.",
                          "additionalProperties": false
                        },
                        "rateRatio": {
                          "description": "Amount of medication per unit of time.",
                          "additionalProperties": false
                        },
                        "rateRange": {
                          "description": "Amount of medication per unit of time.",
                          "additionalProperties": false
                        },
                        "rateQuantity": {
                          "description": "Amount of medication per unit of time.",
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "maxDosePerPeriod": {
                    "description": "Upper limit on medication per unit of time.",
                    "additionalProperties": false
                  },
                  "maxDosePerAdministration": {
                    "description": "Upper limit on medication per administration.",
                    "additionalProperties": false
                  },
                  "maxDosePerLifetime": {
                    "description": "Upper limit on medication per lifetime of the patient.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "valueMeta": {
                "description": "Value of extension - must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list).",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          "type": "array"
        },
        "versionId": {
          "description": "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted.",
          "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
          "type": "string"
        },
        "_versionId": {
          "description": "Base definition for all elements in a resource.",
          "additionalProperties": false
        },
        "lastUpdated": {
          "description": "When the resource last changed - e.g. when the version changed.",
          "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
          "type": "string"
        },
        "_lastUpdated": {
          "description": "Base definition for all elements in a resource.",
          "additionalProperties": false
        },
        "source": {
          "description": "A uri that identifies the source system of the resource. This provides a minimal amount of [[[Provenance]]] information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc.",
          "pattern": "^\\S*$",
          "type": "string"
        },
        "_source": {
          "description": "Base definition for all elements in a resource.",
          "additionalProperties": false
        },
        "profile": {
          "description": "A list of profiles (references to [[[StructureDefinition]]] resources) that this resource claims to conform to. The URL is a reference to [[[StructureDefinition.url]]].",
          "type": "array",
          "items": {}
        },
        "security": {
          "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure.",
          "type": "array",
          "items": {}
        },
        "tag": {
          "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource.",
          "type": "array",
          "items": {}
        }
      },
      "additionalProperties": false
    },
    "implicitRules": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "String of characters used to identify a name or a resource"
    },
    "_implicitRules": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "language": {
      "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
      "type": "string",
      "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
    },
    "_language": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "text": {
      "description": "A human-readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety.",
      "properties": {
        "id": {
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string",
          "description": "A sequence of Unicode characters"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "type": "array",
          "items": {}
        },
        "status": {
          "description": "The status of the narrative - whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data.",
          "enum": [
            "generated",
            "extensions",
            "additional",
            "empty"
          ]
        },
        "_status": {
          "description": "Base definition for all elements in a resource.",
          "additionalProperties": false
        },
        "div": {
          "description": "The actual narrative content, a stripped down version of XHTML."
        }
      },
      "additionalProperties": false,
      "required": [
        "div"
      ]
    },
    "extension": {
      "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
      "type": "array",
      "items": {}
    },
    "modifierExtension": {
      "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
      "type": "array",
      "items": {}
    },
    "url": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "String of characters used to identify a name or a resource"
    },
    "_url": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "identifier": {
      "description": "A formal identifier that is used to identify this structure definition when it is represented in other formats, or referenced in a specification, model, design or an instance.",
      "items": {
        "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
        "additionalProperties": false
      },
      "type": "array"
    },
    "version": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A sequence of Unicode characters"
    },
    "_version": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "name": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A sequence of Unicode characters"
    },
    "_name": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "title": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A sequence of Unicode characters"
    },
    "_title": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "status": {
      "description": "The status of this structure definition. Enables tracking the life-cycle of the content.",
      "enum": [
        "draft",
        "active",
        "retired",
        "unknown"
      ]
    },
    "_status": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "experimental": {
      "description": "A Boolean value to indicate that this structure definition is authored for testing purposes (or education/evaluation/marketing) and is not intended to be used for genuine usage.",
      "pattern": "^true|false$",
      "type": "boolean"
    },
    "_experimental": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "date": {
      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
      "type": "string",
      "description": "A date, date-time or partial date (e.g. just year or year + month).  If hours and minutes are specified, a time zone SHALL be populated. The format is a union of the schema types gYear, gYearMonth, date and dateTime. Seconds must be provided due to schema type constraints but may be zero-filled and may be ignored.                 Dates SHALL be valid dates."
    },
    "_date": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "publisher": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A sequence of Unicode characters"
    },
    "_publisher": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "contact": {
      "description": "Contact details to assist a user in finding and communicating with the publisher.",
      "type": "array",
      "items": {}
    },
    "description": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
    },
    "_description": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "useContext": {
      "description": "The content was developed with a focus and intent of supporting the contexts that are listed. These contexts may be general categories (gender, age, ...) or may be references to specific programs (insurance plans, studies, ...) and may be used to assist with indexing and searching for appropriate structure definition instances.",
      "items": {
        "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
        "additionalProperties": false
      },
      "type": "array"
    },
    "jurisdiction": {
      "description": "A legal or geographic region in which the structure definition is intended to be used.",
      "type": "array",
      "items": {}
    },
    "purpose": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
    },
    "_purpose": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "copyright": {
      "pattern": "^[ \\r\\n\\t\\S]+$",
      "type": "string",
      "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
    },
    "_copyright": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "keyword": {
      "description": "A set of key words or terms from external terminologies that may be used to assist with indexing and searching of templates nby describing the use of this structure definition, or the content it describes.",
      "type": "array",
      "items": {}
    },
    "fhirVersion": {
      "description": "The version of the FHIR specification on which this StructureDefinition is based - this is the formal version of the specification, without the revision number, e.g. [publication].[major].[minor], which is 4.0.1. for this version.",
      "enum": [
        "0.01",
        "0.05",
        "0.06",
        "0.11",
        "0.0.80",
        "0.0.81",
        "0.0.82",
        "0.4.0",
        "0.5.0",
        "1.0.0",
        "1.0.1",
        "1.0.2",
        "1.1.0",
        "1.4.0",
        "1.6.0",
        "1.8.0",
        "3.0.0",
        "3.0.1",
        "3.3.0",
        "3.5.0",
        "4.0.0",
        "4.0.1"
      ]
    },
    "_fhirVersion": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "mapping": {
      "description": "An external specification that the content is mapped to.",
      "items": {
        "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
        "properties": {
          "id": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A sequence of Unicode characters"
          },
          "extension": {
            "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            "type": "array",
            "items": {}
          },
          "modifierExtension": {
            "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            "type": "array",
            "items": {}
          },
          "identity": {
            "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
            "type": "string",
            "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
          },
          "_identity": {
            "description": "Base definition for all elements in a resource.",
            "additionalProperties": false
          },
          "uri": {
            "pattern": "^\\S*$",
            "type": "string",
            "description": "String of characters used to identify a name or a resource"
          },
          "_uri": {
            "description": "Base definition for all elements in a resource.",
            "additionalProperties": false
          },
          "name": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A sequence of Unicode characters"
          },
          "_name": {
            "description": "Base definition for all elements in a resource.",
            "additionalProperties": false
          },
          "comment": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A sequence of Unicode characters"
          },
          "_comment": {
            "description": "Base definition for all elements in a resource.",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "type": "array"
    },
    "kind": {
      "description": "Defines the kind of structure that this definition is describing.",
      "enum": [
        "primitive-type",
        "complex-type",
        "resource",
        "logical"
      ]
    },
    "_kind": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "abstract": {
      "description": "Whether structure this definition describes is abstract or not  - that is, whether the structure is not intended to be instantiated. For Resources and Data types, abstract types will never be exchanged  between systems.",
      "pattern": "^true|false$",
      "type": "boolean"
    },
    "_abstract": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "context": {
      "description": "Identifies the types of resource or data type elements to which the extension can be applied.",
      "items": {
        "description": "A definition of a FHIR structure. This resource is used to describe the underlying resources, data types defined in FHIR, and also for describing extensions and constraints on resources and data types.",
        "properties": {
          "id": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A sequence of Unicode characters"
          },
          "extension": {
            "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
            "type": "array",
            "items": {}
          },
          "modifierExtension": {
            "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            "type": "array",
            "items": {}
          },
          "type": {
            "description": "Defines how to interpret the expression that defines what the context of the extension is.",
            "enum": [
              "fhirpath",
              "element",
              "extension"
            ]
          },
          "_type": {
            "description": "Base definition for all elements in a resource.",
            "additionalProperties": false
          },
          "expression": {
            "pattern": "^[ \\r\\n\\t\\S]+$",
            "type": "string",
            "description": "A sequence of Unicode characters"
          },
          "_expression": {
            "description": "Base definition for all elements in a resource.",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      "type": "array"
    },
    "contextInvariant": {
      "description": "A set of rules as FHIRPath Invariants about when the extension can be used (e.g. co-occurrence variants for the extension). All the rules must be true.",
      "type": "array",
      "items": {}
    },
    "_contextInvariant": {
      "description": "Extensions for contextInvariant",
      "type": "array",
      "items": {}
    },
    "type": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "String of characters used to identify a name or a resource"
    },
    "_type": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "baseDefinition": {
      "pattern": "^\\S*$",
      "type": "string",
      "description": "A URI that is a reference to a canonical URL on a FHIR resource"
    },
    "derivation": {
      "description": "How the type relates to the baseDefinition.",
      "enum": [
        "specialization",
        "constraint"
      ]
    },
    "_derivation": {
      "description": "Base definition for all elements in a resource.",
      "additionalProperties": false
    },
    "snapshot": {
      "description": "A snapshot view is expressed in a standalone form that can be used and interpreted without considering the base StructureDefinition.",
      "properties": {
        "id": {
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string",
          "description": "A sequence of Unicode characters"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "type": "array",
          "items": {}
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "type": "array",
          "items": {}
        },
        "element": {
          "description": "Captures constraints on each element within the resource.",
          "items": {
            "description": "Captures constraints on each element within the resource, profile, or extension.",
            "properties": {
              "id": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "extension": {
                "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                "type": "array",
                "items": {}
              },
              "modifierExtension": {
                "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                "type": "array",
                "items": {}
              },
              "path": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_path": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "representation": {
                "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case.",
                "items": {
                  "enum": [
                    "xmlAttr",
                    "xmlText",
                    "typeAttr",
                    "cdaText",
                    "xhtml"
                  ]
                },
                "type": "array"
              },
              "_representation": {
                "description": "Extensions for representation",
                "type": "array",
                "items": {}
              },
              "sliceName": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_sliceName": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "sliceIsConstraining": {
                "description": "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName.",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_sliceIsConstraining": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "label": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_label": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "code": {
                "description": "A code that has the same meaning as the element in a particular terminology.",
                "type": "array",
                "items": {}
              },
              "slicing": {
                "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "array",
                    "items": {}
                  },
                  "discriminator": {
                    "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices.",
                    "items": {
                      "description": "Captures constraints on each element within the resource, profile, or extension.",
                      "properties": {
                        "id": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "extension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                          "type": "array",
                          "items": {}
                        },
                        "modifierExtension": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                          "type": "array",
                          "items": {}
                        },
                        "type": {
                          "description": "How the element value is interpreted when discrimination is evaluated.",
                          "enum": [
                            "value",
                            "exists",
                            "pattern",
                            "type",
                            "profile"
                          ]
                        },
                        "_type": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        },
                        "path": {
                          "pattern": "^[ \\r\\n\\t\\S]+$",
                          "type": "string",
                          "description": "A sequence of Unicode characters"
                        },
                        "_path": {
                          "description": "Base definition for all elements in a resource.",
                          "additionalProperties": false
                        }
                      },
                      "additionalProperties": false
                    },
                    "type": "array"
                  },
                  "description": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_description": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "ordered": {
                    "description": "If the matching elements have to occur in the same order as defined in the profile.",
                    "pattern": "^true|false$",
                    "type": "boolean"
                  },
                  "_ordered": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "rules": {
                    "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end.",
                    "enum": [
                      "closed",
                      "open",
                      "openAtEnd"
                    ]
                  },
                  "_rules": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "short": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_short": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "definition": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
              },
              "_definition": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "comment": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
              },
              "_comment": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "requirements": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
              },
              "_requirements": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "alias": {
                "description": "Identifies additional names by which this element might also be known.",
                "type": "array",
                "items": {}
              },
              "_alias": {
                "description": "Extensions for alias",
                "type": "array",
                "items": {}
              },
              "min": {
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number",
                "description": "An integer with a value that is not negative (e.g. >= 0)"
              },
              "_min": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "max": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_max": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "base": {
                "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element - i.g. either in a constraint on another type, or for elements from a super type in a snap shot - then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same.",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "array",
                    "items": {}
                  },
                  "path": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_path": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "min": {
                    "pattern": "^[0]|([1-9][0-9]*)$",
                    "type": "number",
                    "description": "An integer with a value that is not negative (e.g. >= 0)"
                  },
                  "_min": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "max": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_max": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  }
                },
                "additionalProperties": false
              },
              "contentReference": {
                "pattern": "^\\S*$",
                "type": "string",
                "description": "String of characters used to identify a name or a resource"
              },
              "_contentReference": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "type": {
                "description": "The data type or resource that the value of this element is permitted to be.",
                "items": {
                  "description": "Captures constraints on each element within the resource, profile, or extension.",
                  "properties": {
                    "id": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "extension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                      "type": "array",
                      "items": {}
                    },
                    "modifierExtension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                      "type": "array",
                      "items": {}
                    },
                    "code": {
                      "pattern": "^\\S*$",
                      "type": "string",
                      "description": "String of characters used to identify a name or a resource"
                    },
                    "_code": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "profile": {
                      "description": "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide.",
                      "type": "array",
                      "items": {}
                    },
                    "targetProfile": {
                      "description": "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference - to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide.",
                      "type": "array",
                      "items": {}
                    },
                    "aggregation": {
                      "description": "If the type is a reference to another resource, how the resource is or can be aggregated - is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle.",
                      "items": {
                        "enum": [
                          "contained",
                          "referenced",
                          "bundled"
                        ]
                      },
                      "type": "array"
                    },
                    "_aggregation": {
                      "description": "Extensions for aggregation",
                      "type": "array",
                      "items": {}
                    },
                    "versioning": {
                      "description": "Whether this reference needs to be version specific or version independent, or whether either can be used.",
                      "enum": [
                        "either",
                        "independent",
                        "specific"
                      ]
                    },
                    "_versioning": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": "array"
              },
              "defaultValueBase64Binary": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                "type": "string"
              },
              "_defaultValueBase64Binary": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueBoolean": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_defaultValueBoolean": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueCanonical": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_defaultValueCanonical": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueCode": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                "type": "string"
              },
              "_defaultValueCode": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueDate": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                "type": "string"
              },
              "_defaultValueDate": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueDateTime": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                "type": "string"
              },
              "_defaultValueDateTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueDecimal": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                "type": "number"
              },
              "_defaultValueDecimal": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueId": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                "type": "string"
              },
              "_defaultValueId": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueInstant": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                "type": "string"
              },
              "_defaultValueInstant": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueInteger": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number"
              },
              "_defaultValueInteger": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueMarkdown": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_defaultValueMarkdown": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueOid": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                "type": "string"
              },
              "_defaultValueOid": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValuePositiveInt": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^[1-9][0-9]*$",
                "type": "number"
              },
              "_defaultValuePositiveInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueString": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_defaultValueString": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueTime": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                "type": "string"
              },
              "_defaultValueTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueUnsignedInt": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number"
              },
              "_defaultValueUnsignedInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueUri": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_defaultValueUri": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueUrl": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_defaultValueUrl": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueUuid": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                "type": "string"
              },
              "_defaultValueUuid": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "defaultValueAddress": {
                "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
                "additionalProperties": false
              },
              "defaultValueAge": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueAnnotation": {
                "description": "A  text note which also  contains information about who made the statement and when.",
                "additionalProperties": false
              },
              "defaultValueAttachment": {
                "description": "For referring to data content defined in other formats.",
                "additionalProperties": false
              },
              "defaultValueCodeableConcept": {
                "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                "additionalProperties": false
              },
              "defaultValueCoding": {
                "description": "A reference to a code defined by a terminology system.",
                "additionalProperties": false
              },
              "defaultValueContactPoint": {
                "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
                "additionalProperties": false
              },
              "defaultValueCount": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueDistance": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueDuration": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueHumanName": {
                "description": "A human's name with the ability to identify parts and usage.",
                "additionalProperties": false
              },
              "defaultValueIdentifier": {
                "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
                "additionalProperties": false
              },
              "defaultValueMoney": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValuePeriod": {
                "description": "A time period defined by a start and end date and optionally time.",
                "additionalProperties": false
              },
              "defaultValueQuantity": {
                "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
                "additionalProperties": false
              },
              "defaultValueRange": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueRatio": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueReference": {
                "description": "A reference from one resource to another.",
                "additionalProperties": false
              },
              "defaultValueSampledData": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueSignature": {
                "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
                "additionalProperties": false
              },
              "defaultValueTiming": {
                "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
                "additionalProperties": false
              },
              "defaultValueContactDetail": {
                "description": "Specifies contact information for a person or organization.",
                "additionalProperties": false
              },
              "defaultValueContributor": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueDataRequirement": {
                "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                "additionalProperties": false
              },
              "defaultValueExpression": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "defaultValueParameterDefinition": {
                "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
                "additionalProperties": false
              },
              "defaultValueRelatedArtifact": {
                "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
                "additionalProperties": false
              },
              "defaultValueTriggerDefinition": {
                "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
                "additionalProperties": false
              },
              "defaultValueUsageContext": {
                "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
                "additionalProperties": false
              },
              "defaultValueDosage": {
                "description": "Indicates how the medication is/was taken or should be taken by the patient.",
                "additionalProperties": false
              },
              "defaultValueMeta": {
                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false').",
                "additionalProperties": false
              },
              "meaningWhenMissing": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A string that may contain Github Flavored Markdown syntax for optional processing by a mark down presentation engine"
              },
              "_meaningWhenMissing": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "orderMeaning": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_orderMeaning": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedBase64Binary": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                "type": "string"
              },
              "_fixedBase64Binary": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedBoolean": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_fixedBoolean": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedCanonical": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_fixedCanonical": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedCode": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                "type": "string"
              },
              "_fixedCode": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedDate": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                "type": "string"
              },
              "_fixedDate": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedDateTime": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                "type": "string"
              },
              "_fixedDateTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedDecimal": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                "type": "number"
              },
              "_fixedDecimal": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedId": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                "type": "string"
              },
              "_fixedId": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedInstant": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                "type": "string"
              },
              "_fixedInstant": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedInteger": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number"
              },
              "_fixedInteger": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedMarkdown": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_fixedMarkdown": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedOid": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                "type": "string"
              },
              "_fixedOid": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedPositiveInt": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^[1-9][0-9]*$",
                "type": "number"
              },
              "_fixedPositiveInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedString": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_fixedString": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedTime": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                "type": "string"
              },
              "_fixedTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedUnsignedInt": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number"
              },
              "_fixedUnsignedInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedUri": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_fixedUri": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedUrl": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_fixedUrl": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedUuid": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                "type": "string"
              },
              "_fixedUuid": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "fixedAddress": {
                "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
                "additionalProperties": false
              },
              "fixedAge": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedAnnotation": {
                "description": "A  text note which also  contains information about who made the statement and when.",
                "additionalProperties": false
              },
              "fixedAttachment": {
                "description": "For referring to data content defined in other formats.",
                "additionalProperties": false
              },
              "fixedCodeableConcept": {
                "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                "additionalProperties": false
              },
              "fixedCoding": {
                "description": "A reference to a code defined by a terminology system.",
                "additionalProperties": false
              },
              "fixedContactPoint": {
                "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
                "additionalProperties": false
              },
              "fixedCount": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedDistance": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedDuration": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedHumanName": {
                "description": "A human's name with the ability to identify parts and usage.",
                "additionalProperties": false
              },
              "fixedIdentifier": {
                "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
                "additionalProperties": false
              },
              "fixedMoney": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedPeriod": {
                "description": "A time period defined by a start and end date and optionally time.",
                "additionalProperties": false
              },
              "fixedQuantity": {
                "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
                "additionalProperties": false
              },
              "fixedRange": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedRatio": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedReference": {
                "description": "A reference from one resource to another.",
                "additionalProperties": false
              },
              "fixedSampledData": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedSignature": {
                "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
                "additionalProperties": false
              },
              "fixedTiming": {
                "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
                "additionalProperties": false
              },
              "fixedContactDetail": {
                "description": "Specifies contact information for a person or organization.",
                "additionalProperties": false
              },
              "fixedContributor": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedDataRequirement": {
                "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                "additionalProperties": false
              },
              "fixedExpression": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "fixedParameterDefinition": {
                "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
                "additionalProperties": false
              },
              "fixedRelatedArtifact": {
                "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
                "additionalProperties": false
              },
              "fixedTriggerDefinition": {
                "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
                "additionalProperties": false
              },
              "fixedUsageContext": {
                "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
                "additionalProperties": false
              },
              "fixedDosage": {
                "description": "Indicates how the medication is/was taken or should be taken by the patient.",
                "additionalProperties": false
              },
              "fixedMeta": {
                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non-significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing.",
                "additionalProperties": false
              },
              "patternBase64Binary": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                "type": "string"
              },
              "_patternBase64Binary": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternBoolean": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_patternBoolean": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternCanonical": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_patternCanonical": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternCode": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                "type": "string"
              },
              "_patternCode": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternDate": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                "type": "string"
              },
              "_patternDate": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternDateTime": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                "type": "string"
              },
              "_patternDateTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternDecimal": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                "type": "number"
              },
              "_patternDecimal": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternId": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                "type": "string"
              },
              "_patternId": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternInstant": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                "type": "string"
              },
              "_patternInstant": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternInteger": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number"
              },
              "_patternInteger": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternMarkdown": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_patternMarkdown": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternOid": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                "type": "string"
              },
              "_patternOid": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternPositiveInt": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^[1-9][0-9]*$",
                "type": "number"
              },
              "_patternPositiveInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternString": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string"
              },
              "_patternString": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternTime": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                "type": "string"
              },
              "_patternTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternUnsignedInt": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number"
              },
              "_patternUnsignedInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternUri": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_patternUri": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternUrl": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^\\S*$",
                "type": "string"
              },
              "_patternUrl": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternUuid": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                "type": "string"
              },
              "_patternUuid": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "patternAddress": {
                "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
                "additionalProperties": false
              },
              "patternAge": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternAnnotation": {
                "description": "A  text note which also  contains information about who made the statement and when.",
                "additionalProperties": false
              },
              "patternAttachment": {
                "description": "For referring to data content defined in other formats.",
                "additionalProperties": false
              },
              "patternCodeableConcept": {
                "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                "additionalProperties": false
              },
              "patternCoding": {
                "description": "A reference to a code defined by a terminology system.",
                "additionalProperties": false
              },
              "patternContactPoint": {
                "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
                "additionalProperties": false
              },
              "patternCount": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternDistance": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternDuration": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternHumanName": {
                "description": "A human's name with the ability to identify parts and usage.",
                "additionalProperties": false
              },
              "patternIdentifier": {
                "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
                "additionalProperties": false
              },
              "patternMoney": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternPeriod": {
                "description": "A time period defined by a start and end date and optionally time.",
                "additionalProperties": false
              },
              "patternQuantity": {
                "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
                "additionalProperties": false
              },
              "patternRange": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternRatio": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternReference": {
                "description": "A reference from one resource to another.",
                "additionalProperties": false
              },
              "patternSampledData": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternSignature": {
                "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
                "additionalProperties": false
              },
              "patternTiming": {
                "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
                "additionalProperties": false
              },
              "patternContactDetail": {
                "description": "Specifies contact information for a person or organization.",
                "additionalProperties": false
              },
              "patternContributor": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternDataRequirement": {
                "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                "additionalProperties": false
              },
              "patternExpression": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "patternParameterDefinition": {
                "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
                "additionalProperties": false
              },
              "patternRelatedArtifact": {
                "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
                "additionalProperties": false
              },
              "patternTriggerDefinition": {
                "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
                "additionalProperties": false
              },
              "patternUsageContext": {
                "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
                "additionalProperties": false
              },
              "patternDosage": {
                "description": "Indicates how the medication is/was taken or should be taken by the patient.",
                "additionalProperties": false
              },
              "patternMeta": {
                "description": "Specifies a value that the value in the instance SHALL follow - that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match -- i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value.",
                "additionalProperties": false
              },
              "example": {
                "description": "A sample value for this element demonstrating the type of information that would typically be found in the element.",
                "items": {
                  "description": "Captures constraints on each element within the resource, profile, or extension.",
                  "properties": {
                    "id": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "extension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                      "type": "array",
                      "items": {}
                    },
                    "modifierExtension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                      "type": "array",
                      "items": {}
                    },
                    "label": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_label": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueBase64Binary": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+$",
                      "type": "string"
                    },
                    "_valueBase64Binary": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueBoolean": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^true|false$",
                      "type": "boolean"
                    },
                    "_valueBoolean": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueCanonical": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^\\S*$",
                      "type": "string"
                    },
                    "_valueCanonical": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueCode": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                      "type": "string"
                    },
                    "_valueCode": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueDate": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                      "type": "string"
                    },
                    "_valueDate": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueDateTime": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                      "type": "string"
                    },
                    "_valueDateTime": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueDecimal": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                      "type": "number"
                    },
                    "_valueDecimal": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueId": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                      "type": "string"
                    },
                    "_valueId": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueInstant": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                      "type": "string"
                    },
                    "_valueInstant": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueInteger": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^-?([0]|([1-9][0-9]*))$",
                      "type": "number"
                    },
                    "_valueInteger": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueMarkdown": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string"
                    },
                    "_valueMarkdown": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueOid": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^urn:oid:[0-2](\\.(0|[1-9][0-9]*))+$",
                      "type": "string"
                    },
                    "_valueOid": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valuePositiveInt": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^[1-9][0-9]*$",
                      "type": "number"
                    },
                    "_valuePositiveInt": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueString": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string"
                    },
                    "_valueString": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueTime": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                      "type": "string"
                    },
                    "_valueTime": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueUnsignedInt": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^[0]|([1-9][0-9]*)$",
                      "type": "number"
                    },
                    "_valueUnsignedInt": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueUri": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^\\S*$",
                      "type": "string"
                    },
                    "_valueUri": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueUrl": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^\\S*$",
                      "type": "string"
                    },
                    "_valueUrl": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueUuid": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "pattern": "^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$",
                      "type": "string"
                    },
                    "_valueUuid": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "valueAddress": {
                      "description": "An address expressed using postal conventions (as opposed to GPS or other location definition formats).  This data type may be used to convey addresses for use in delivering mail as well as for visiting locations which might not be valid for mail delivery.  There are a variety of postal address formats defined around the world.",
                      "additionalProperties": false
                    },
                    "valueAge": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueAnnotation": {
                      "description": "A  text note which also  contains information about who made the statement and when.",
                      "additionalProperties": false
                    },
                    "valueAttachment": {
                      "description": "For referring to data content defined in other formats.",
                      "additionalProperties": false
                    },
                    "valueCodeableConcept": {
                      "description": "A concept that may be defined by a formal reference to a terminology or ontology or may be provided by text.",
                      "additionalProperties": false
                    },
                    "valueCoding": {
                      "description": "A reference to a code defined by a terminology system.",
                      "additionalProperties": false
                    },
                    "valueContactPoint": {
                      "description": "Details for all kinds of technology mediated contact points for a person or organization, including telephone, email, etc.",
                      "additionalProperties": false
                    },
                    "valueCount": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueDistance": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueDuration": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueHumanName": {
                      "description": "A human's name with the ability to identify parts and usage.",
                      "additionalProperties": false
                    },
                    "valueIdentifier": {
                      "description": "An identifier - identifies some entity uniquely and unambiguously. Typically this is used for business identifiers.",
                      "additionalProperties": false
                    },
                    "valueMoney": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valuePeriod": {
                      "description": "A time period defined by a start and end date and optionally time.",
                      "additionalProperties": false
                    },
                    "valueQuantity": {
                      "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
                      "additionalProperties": false
                    },
                    "valueRange": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueRatio": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueReference": {
                      "description": "A reference from one resource to another.",
                      "additionalProperties": false
                    },
                    "valueSampledData": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueSignature": {
                      "description": "A signature along with supporting context. The signature may be a digital signature that is cryptographic in nature, or some other signature acceptable to the domain. This other signature may be as simple as a graphical image representing a hand-written signature, or a signature ceremony Different signature approaches have different utilities.",
                      "additionalProperties": false
                    },
                    "valueTiming": {
                      "description": "Specifies an event that may occur multiple times. Timing schedules are used to record when things are planned, expected or requested to occur. The most common usage is in dosage instructions for medications. They are also used when planning care of various kinds, and may be used for reporting the schedule to which past regular activities were carried out.",
                      "additionalProperties": false
                    },
                    "valueContactDetail": {
                      "description": "Specifies contact information for a person or organization.",
                      "additionalProperties": false
                    },
                    "valueContributor": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueDataRequirement": {
                      "description": "Describes a required data item for evaluation in terms of the type of data, and optional code or date-based filters of the data.",
                      "additionalProperties": false
                    },
                    "valueExpression": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    },
                    "valueParameterDefinition": {
                      "description": "The parameters to the module. This collection specifies both the input and output parameters. Input parameters are provided by the caller as part of the $evaluate operation. Output parameters are included in the GuidanceResponse.",
                      "additionalProperties": false
                    },
                    "valueRelatedArtifact": {
                      "description": "Related artifacts such as additional documentation, justification, or bibliographic references.",
                      "additionalProperties": false
                    },
                    "valueTriggerDefinition": {
                      "description": "A description of a triggering event. Triggering events can be named events, data events, or periodic, as determined by the type element.",
                      "additionalProperties": false
                    },
                    "valueUsageContext": {
                      "description": "Specifies clinical/business/etc. metadata that can be used to retrieve, index and/or categorize an artifact. This metadata can either be specific to the applicable population (e.g., age category, DRG) or the specific context of care (e.g., venue, care setting, provider of care).",
                      "additionalProperties": false
                    },
                    "valueDosage": {
                      "description": "Indicates how the medication is/was taken or should be taken by the patient.",
                      "additionalProperties": false
                    },
                    "valueMeta": {
                      "description": "The actual value for the element, which must be one of the types allowed for this element.",
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": "array"
              },
              "minValueDate": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                "type": "string"
              },
              "_minValueDate": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueDateTime": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                "type": "string"
              },
              "_minValueDateTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueInstant": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                "type": "string"
              },
              "_minValueInstant": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueTime": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                "type": "string"
              },
              "_minValueTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueDecimal": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                "type": "number"
              },
              "_minValueDecimal": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueInteger": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number"
              },
              "_minValueInteger": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValuePositiveInt": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^[1-9][0-9]*$",
                "type": "number"
              },
              "_minValuePositiveInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueUnsignedInt": {
                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number"
              },
              "_minValueUnsignedInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "minValueQuantity": {
                "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
                "additionalProperties": false
              },
              "maxValueDate": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?$",
                "type": "string"
              },
              "_maxValueDate": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueDateTime": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?$",
                "type": "string"
              },
              "_maxValueDateTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueInstant": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))$",
                "type": "string"
              },
              "_maxValueInstant": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueTime": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?$",
                "type": "string"
              },
              "_maxValueTime": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueDecimal": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^-?(0|[1-9][0-9]*)(\\.[0-9]+)?([eE][+-]?[0-9]+)?$",
                "type": "number"
              },
              "_maxValueDecimal": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueInteger": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number"
              },
              "_maxValueInteger": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValuePositiveInt": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^[1-9][0-9]*$",
                "type": "number"
              },
              "_maxValuePositiveInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueUnsignedInt": {
                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity.",
                "pattern": "^[0]|([1-9][0-9]*)$",
                "type": "number"
              },
              "_maxValueUnsignedInt": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "maxValueQuantity": {
                "description": "A measured amount (or an amount that can potentially be measured). Note that measured amounts include amounts that are not precisely quantified, including amounts involving arbitrary units and floating currencies.",
                "additionalProperties": false
              },
              "maxLength": {
                "pattern": "^-?([0]|([1-9][0-9]*))$",
                "type": "number",
                "description": "A whole number"
              },
              "_maxLength": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "condition": {
                "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance.",
                "items": {
                  "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                  "type": "string",
                  "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
                },
                "type": "array"
              },
              "_condition": {
                "description": "Extensions for condition",
                "type": "array",
                "items": {}
              },
              "constraint": {
                "description": "Formal constraints such as co-occurrence and other constraints that can be computationally evaluated within the context of the instance.",
                "items": {
                  "description": "Captures constraints on each element within the resource, profile, or extension.",
                  "properties": {
                    "id": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "extension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                      "type": "array",
                      "items": {}
                    },
                    "modifierExtension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                      "type": "array",
                      "items": {}
                    },
                    "key": {
                      "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                      "type": "string",
                      "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
                    },
                    "_key": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "requirements": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_requirements": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "severity": {
                      "description": "Identifies the impact constraint violation has on the conformance of the instance.",
                      "enum": [
                        "error",
                        "warning"
                      ]
                    },
                    "_severity": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "human": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_human": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "expression": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_expression": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "xpath": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_xpath": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "source": {
                      "pattern": "^\\S*$",
                      "type": "string",
                      "description": "A URI that is a reference to a canonical URL on a FHIR resource"
                    }
                  },
                  "additionalProperties": false
                },
                "type": "array"
              },
              "mustSupport": {
                "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation.",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_mustSupport": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "isModifier": {
                "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre-determination has been made that it is not relevant to their particular system.",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_isModifier": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "isModifierReason": {
                "pattern": "^[ \\r\\n\\t\\S]+$",
                "type": "string",
                "description": "A sequence of Unicode characters"
              },
              "_isModifierReason": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "isSummary": {
                "description": "Whether the element should be included if a client requests a search with the parameter _summary=true.",
                "pattern": "^true|false$",
                "type": "boolean"
              },
              "_isSummary": {
                "description": "Base definition for all elements in a resource.",
                "additionalProperties": false
              },
              "binding": {
                "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri).",
                "properties": {
                  "id": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "extension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                    "type": "array",
                    "items": {}
                  },
                  "modifierExtension": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "array",
                    "items": {}
                  },
                  "strength": {
                    "description": "Indicates the degree of conformance expectations associated with this binding - that is, the degree to which the provided value set must be adhered to in the instances.",
                    "enum": [
                      "required",
                      "extensible",
                      "preferred",
                      "example"
                    ]
                  },
                  "_strength": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "description": {
                    "pattern": "^[ \\r\\n\\t\\S]+$",
                    "type": "string",
                    "description": "A sequence of Unicode characters"
                  },
                  "_description": {
                    "description": "Base definition for all elements in a resource.",
                    "additionalProperties": false
                  },
                  "valueSet": {
                    "pattern": "^\\S*$",
                    "type": "string",
                    "description": "A URI that is a reference to a canonical URL on a FHIR resource"
                  }
                },
                "additionalProperties": false
              },
              "mapping": {
                "description": "Identifies a concept from an external specification that roughly corresponds to this element.",
                "items": {
                  "description": "Captures constraints on each element within the resource, profile, or extension.",
                  "properties": {
                    "id": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "extension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
                      "type": "array",
                      "items": {}
                    },
                    "modifierExtension": {
                      "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                      "type": "array",
                      "items": {}
                    },
                    "identity": {
                      "pattern": "^[A-Za-z0-9\\-\\.]{1,64}$",
                      "type": "string",
                      "description": "Any combination of letters, numerals, \"-\" and \".\", with a length limit of 64 characters.  (This might be an integer, an unprefixed OID, UUID or any other identifier pattern that meets these constraints.)  Ids are case-insensitive."
                    },
                    "_identity": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "language": {
                      "pattern": "^[^\\s]+(\\s[^\\s]+)*$",
                      "type": "string",
                      "description": "A string which has at least one character and no leading or trailing whitespace and where there is no whitespace other than single spaces in the contents"
                    },
                    "_language": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "map": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_map": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    },
                    "comment": {
                      "pattern": "^[ \\r\\n\\t\\S]+$",
                      "type": "string",
                      "description": "A sequence of Unicode characters"
                    },
                    "_comment": {
                      "description": "Base definition for all elements in a resource.",
                      "additionalProperties": false
                    }
                  },
                  "additionalProperties": false
                },
                "type": "array"
              }
            },
            "additionalProperties": false
          },
          "type": "array"
        }
      },
      "additionalProperties": false,
      "required": [
        "element"
      ]
    },
    "differential": {
      "description": "A differential view is expressed relative to the base StructureDefinition - a statement of differences that it applies.",
      "properties": {
        "id": {
          "pattern": "^[ \\r\\n\\t\\S]+$",
          "type": "string",
          "description": "A sequence of Unicode characters"
        },
        "extension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension.",
          "type": "array",
          "items": {}
        },
        "modifierExtension": {
          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
          "type": "array",
          "items": {}
        },
        "element": {
          "description": "Captures constraints on each element within the resource.",
          "type": "array",
          "items": {}
        }
      },
      "additionalProperties": false,
      "required": [
        "element"
      ]
    }
  },
  "additionalProperties": false,
  "required": [
    "resourceType"
  ]
}