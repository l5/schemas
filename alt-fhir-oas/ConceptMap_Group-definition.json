{
  "allOf": [
    {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "modifierExtension": {
              "type": "array",
              "items": {
                "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                "allOf": [
                  {
                    "type": "object",
                    "additionalProperties": true
                  }
                ]
              }
            }
          }
        }
      ]
    },
    {
      "type": "object",
      "properties": {
        "source": {
          "type": "string",
          "pattern": "\\S*",
          "description": "An absolute URI that identifies the source system where the concepts to be mapped are defined."
        },
        "sourceVersion": {
          "type": "string",
          "pattern": "[ \\r\\n\\t\\S]+",
          "description": "The specific version of the code system, as determined by the code system authority."
        },
        "target": {
          "type": "string",
          "pattern": "\\S*",
          "description": "An absolute URI that identifies the target system that the concepts will be mapped to."
        },
        "targetVersion": {
          "type": "string",
          "pattern": "[ \\r\\n\\t\\S]+",
          "description": "The specific version of the code system, as determined by the code system authority."
        },
        "element": {
          "type": "array",
          "items": {
            "description": "Mappings for an individual concept in the source to one or more concepts in the target.",
            "allOf": [
              {
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "modifierExtension": {
                        "type": "array",
                        "items": {
                          "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                          "allOf": [
                            {
                              "type": "object",
                              "additionalProperties": true
                            }
                          ]
                        }
                      }
                    }
                  }
                ]
              },
              {
                "type": "object",
                "properties": {
                  "code": {
                    "type": "string",
                    "pattern": "[^\\s]+(\\s[^\\s]+)*",
                    "description": "Identity (code or path) or the element/item being mapped."
                  },
                  "display": {
                    "type": "string",
                    "pattern": "[ \\r\\n\\t\\S]+",
                    "description": "The display for the code. The display is only provided to help editors when editing the concept map."
                  },
                  "target": {
                    "type": "array",
                    "items": {
                      "description": "A concept from the target value set that this concept maps to.",
                      "allOf": [
                        {
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "modifierExtension": {
                                  "type": "array",
                                  "items": {
                                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "additionalProperties": true
                                      }
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        },
                        {
                          "type": "object",
                          "properties": {
                            "code": {
                              "type": "string",
                              "pattern": "[^\\s]+(\\s[^\\s]+)*",
                              "description": "Identity (code or path) or the element/item that the map refers to."
                            },
                            "display": {
                              "type": "string",
                              "pattern": "[ \\r\\n\\t\\S]+",
                              "description": "The display for the code. The display is only provided to help editors when editing the concept map."
                            },
                            "equivalence": {
                              "type": "string",
                              "enum": [
                                "relatedto",
                                "equivalent",
                                "equal",
                                "wider",
                                "subsumes",
                                "narrower",
                                "specializes",
                                "inexact",
                                "unmatched",
                                "disjoint"
                              ],
                              "description": "The equivalence between the source and target concepts (counting for the dependencies and products). The equivalence is read from target to source (e.g. the target is 'wider' than the source)."
                            },
                            "comment": {
                              "type": "string",
                              "pattern": "[ \\r\\n\\t\\S]+",
                              "description": "A description of status/issues in mapping that conveys additional information not represented in  the structured data."
                            },
                            "dependsOn": {
                              "type": "array",
                              "items": {
                                "description": "A set of additional dependencies for this mapping to hold. This mapping is only applicable if the specified element can be resolved, and it has the specified value.",
                                "allOf": [
                                  {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "modifierExtension": {
                                            "type": "array",
                                            "items": {
                                              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "string",
                                        "pattern": "\\S*",
                                        "description": "A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property."
                                      },
                                      "system": {
                                        "type": "string",
                                        "pattern": "\\S*",
                                        "description": "An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems)."
                                      },
                                      "value": {
                                        "type": "string",
                                        "pattern": "[ \\r\\n\\t\\S]+",
                                        "description": "Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to."
                                      },
                                      "display": {
                                        "type": "string",
                                        "pattern": "[ \\r\\n\\t\\S]+",
                                        "description": "The display for the code. The display is only provided to help editors when editing the concept map."
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                ]
                              }
                            },
                            "product": {
                              "type": "array",
                              "items": {
                                "description": "A set of additional outcomes from this mapping to other elements. To properly execute this mapping, the specified element must be mapped to some data element or source that is in context. The mapping may still be useful without a place for the additional data elements, but the equivalence cannot be relied on.",
                                "allOf": [
                                  {
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "modifierExtension": {
                                            "type": "array",
                                            "items": {
                                              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                                              "allOf": [
                                                {
                                                  "type": "object",
                                                  "additionalProperties": true
                                                }
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    ]
                                  },
                                  {
                                    "type": "object",
                                    "properties": {
                                      "property": {
                                        "type": "string",
                                        "pattern": "\\S*",
                                        "description": "A reference to an element that holds a coded value that corresponds to a code system property. The idea is that the information model carries an element somewhere that is labeled to correspond with a code system property."
                                      },
                                      "system": {
                                        "type": "string",
                                        "pattern": "\\S*",
                                        "description": "An absolute URI that identifies the code system of the dependency code (if the source/dependency is a value set that crosses code systems)."
                                      },
                                      "value": {
                                        "type": "string",
                                        "pattern": "[ \\r\\n\\t\\S]+",
                                        "description": "Identity (code or path) or the element/item/ValueSet/text that the map depends on / refers to."
                                      },
                                      "display": {
                                        "type": "string",
                                        "pattern": "[ \\r\\n\\t\\S]+",
                                        "description": "The display for the code. The display is only provided to help editors when editing the concept map."
                                      }
                                    },
                                    "required": [
                                      "property",
                                      "value"
                                    ]
                                  }
                                ]
                              }
                            }
                          },
                          "required": [
                            "equivalence"
                          ]
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          "minItems": 1
        },
        "unmapped": {
          "description": "What to do when there is no mapping for the source concept. \"Unmapped\" does not include codes that are unmatched, and the unmapped element is ignored in a code is specified to have equivalence = unmatched.",
          "allOf": [
            {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "modifierExtension": {
                      "type": "array",
                      "items": {
                        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": true
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "mode": {
                  "type": "string",
                  "enum": [
                    "provided",
                    "fixed",
                    "other-map"
                  ],
                  "description": "Defines which action to take if there is no match for the source concept in the target system designated for the group. One of 3 actions are possible: use the unmapped code (this is useful when doing a mapping between versions, and only a few codes have changed), use a fixed code (a default code), or alternatively, a reference to a different concept map can be provided (by canonical URL)."
                },
                "code": {
                  "type": "string",
                  "pattern": "[^\\s]+(\\s[^\\s]+)*",
                  "description": "The fixed code to use when the mode = 'fixed'  &ndash; all unmapped codes are mapped to a single fixed code."
                },
                "display": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "The display for the code. The display is only provided to help editors when editing the concept map."
                },
                "url": {
                  "type": "string",
                  "pattern": "\\S*",
                  "description": "The canonical reference to an additional ConceptMap resource instance to use for mapping if this ConceptMap resource contains no matching mapping for the source concept."
                }
              },
              "required": [
                "mode"
              ]
            }
          ]
        }
      },
      "required": [
        "element"
      ]
    }
  ]
}