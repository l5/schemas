{
  "allOf": [
    {
      "allOf": [
        {
          "type": "object",
          "properties": {
            "modifierExtension": {
              "type": "array",
              "items": {
                "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                "allOf": [
                  {
                    "type": "object",
                    "additionalProperties": true
                  }
                ]
              }
            }
          }
        }
      ]
    },
    {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "indel",
            "snp",
            "unknown"
          ],
          "description": "INDEL / SNP / Undefined variant."
        },
        "standardSequence": {
          "description": "Gold standard sequence used for comparing against.",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "coding": {
                  "type": "array",
                  "items": {
                    "description": "A reference to a code defined by a terminology system.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "system": {
                            "type": "string",
                            "pattern": "\\S*",
                            "description": "The identification of the code system that defines the meaning of the symbol in the code."
                          },
                          "version": {
                            "type": "string",
                            "pattern": "[ \\r\\n\\t\\S]+",
                            "description": "The version of the code system which was used when choosing this code. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."
                          },
                          "code": {
                            "type": "string",
                            "pattern": "[^\\s]+(\\s[^\\s]+)*",
                            "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post&ndash;coordination)."
                          },
                          "display": {
                            "type": "string",
                            "pattern": "[ \\r\\n\\t\\S]+",
                            "description": "A representation of the meaning of the code in the system, following the rules of the system."
                          },
                          "userSelected": {
                            "type": "boolean",
                            "description": "Indicates that this coding was chosen by a user directly &ndash; e.g. off a pick list of available items (codes or displays)."
                          }
                        }
                      }
                    ]
                  }
                },
                "text": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user."
                }
              }
            }
          ]
        },
        "start": {
          "type": "integer",
          "format": "int32",
          "description": "Start position of the sequence. If the coordinate system is either 0&ndash;based or 1&ndash;based, then start position is inclusive."
        },
        "end": {
          "type": "integer",
          "format": "int32",
          "description": "End position of the sequence. If the coordinate system is 0&ndash;based then end is exclusive and does not include the last position. If the coordinate system is 1&ndash;base, then end is inclusive and includes the last position."
        },
        "score": {
          "allOf": [
            {
              "type": "object",
              "properties": {
                "value": {
                  "type": "number",
                  "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value."
                },
                "comparator": {
                  "type": "string",
                  "enum": [
                    "<",
                    "<=",
                    ">=",
                    ">"
                  ],
                  "description": "How the value should be understood and represented &ndash; whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value."
                },
                "unit": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "A human&ndash;readable form of the unit."
                },
                "system": {
                  "type": "string",
                  "pattern": "\\S*",
                  "description": "The identification of the system that provides the coded form of the unit."
                },
                "code": {
                  "type": "string",
                  "pattern": "[^\\s]+(\\s[^\\s]+)*",
                  "description": "A computer processable form of the unit in some unit representation system."
                }
              }
            }
          ],
          "description": "The score of an experimentally derived feature such as a p&ndash;value ([SO:0001685](http://www.sequenceontology.org/browser/current_svn/term/SO:0001685))."
        },
        "method": {
          "description": "Which method is used to get sequence quality.",
          "allOf": [
            {
              "type": "object",
              "properties": {
                "coding": {
                  "type": "array",
                  "items": {
                    "description": "A reference to a code defined by a terminology system.",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "system": {
                            "type": "string",
                            "pattern": "\\S*",
                            "description": "The identification of the code system that defines the meaning of the symbol in the code."
                          },
                          "version": {
                            "type": "string",
                            "pattern": "[ \\r\\n\\t\\S]+",
                            "description": "The version of the code system which was used when choosing this code. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."
                          },
                          "code": {
                            "type": "string",
                            "pattern": "[^\\s]+(\\s[^\\s]+)*",
                            "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post&ndash;coordination)."
                          },
                          "display": {
                            "type": "string",
                            "pattern": "[ \\r\\n\\t\\S]+",
                            "description": "A representation of the meaning of the code in the system, following the rules of the system."
                          },
                          "userSelected": {
                            "type": "boolean",
                            "description": "Indicates that this coding was chosen by a user directly &ndash; e.g. off a pick list of available items (codes or displays)."
                          }
                        }
                      }
                    ]
                  }
                },
                "text": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user."
                }
              }
            }
          ]
        },
        "truthTP": {
          "type": "number",
          "description": "True positives, from the perspective of the truth data, i.e. the number of sites in the Truth Call Set for which there are paths through the Query Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event."
        },
        "queryTP": {
          "type": "number",
          "description": "True positives, from the perspective of the query data, i.e. the number of sites in the Query Call Set for which there are paths through the Truth Call Set that are consistent with all of the alleles at this site, and for which there is an accurate genotype call for the event."
        },
        "truthFN": {
          "type": "number",
          "description": "False negatives, i.e. the number of sites in the Truth Call Set for which there is no path through the Query Call Set that is consistent with all of the alleles at this site, or sites for which there is an inaccurate genotype call for the event. Sites with correct variant but incorrect genotype are counted here."
        },
        "queryFP": {
          "type": "number",
          "description": "False positives, i.e. the number of sites in the Query Call Set for which there is no path through the Truth Call Set that is consistent with this site. Sites with correct variant but incorrect genotype are counted here."
        },
        "gtFP": {
          "type": "number",
          "description": "The number of false positives where the non&ndash;REF alleles in the Truth and Query Call Sets match (i.e. cases where the truth is 1/1 and the query is 0/1 or similar)."
        },
        "precision": {
          "type": "number",
          "description": "QUERY.TP / (QUERY.TP + QUERY.FP)."
        },
        "recall": {
          "type": "number",
          "description": "TRUTH.TP / (TRUTH.TP + TRUTH.FN)."
        },
        "fScore": {
          "type": "number",
          "description": "Harmonic mean of Recall and Precision, computed as: 2 * precision * recall / (precision + recall)."
        },
        "roc": {
          "description": "Receiver Operator Characteristic (ROC) Curve  to give sensitivity/specificity tradeoff.",
          "allOf": [
            {
              "allOf": [
                {
                  "type": "object",
                  "properties": {
                    "modifierExtension": {
                      "type": "array",
                      "items": {
                        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                        "allOf": [
                          {
                            "type": "object",
                            "additionalProperties": true
                          }
                        ]
                      }
                    }
                  }
                }
              ]
            },
            {
              "type": "object",
              "properties": {
                "score": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "description": "Invidual data point representing the GQ (genotype quality) score threshold."
                  }
                },
                "numTP": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of true positives if the GQ score threshold was set to \"score\" field value."
                  }
                },
                "numFP": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of false positives if the GQ score threshold was set to \"score\" field value."
                  }
                },
                "numFN": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The number of false negatives if the GQ score threshold was set to \"score\" field value."
                  }
                },
                "precision": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "description": "Calculated precision if the GQ score threshold was set to \"score\" field value."
                  }
                },
                "sensitivity": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "description": "Calculated sensitivity if the GQ score threshold was set to \"score\" field value."
                  }
                },
                "fMeasure": {
                  "type": "array",
                  "items": {
                    "type": "number",
                    "description": "Calculated fScore if the GQ score threshold was set to \"score\" field value."
                  }
                }
              }
            }
          ]
        }
      },
      "required": [
        "type"
      ]
    }
  ]
}