
{
    "openapi": "3.0.0",
    "info": {
        "title": "Task API",
        "description": "A simplified version of the HL7 FHIR API for Task resources.",
        "version": "4.0.1"
    },
    "servers": [
        {
            "url": "/fhir-server/api/v4"
        }
    ],
    "x-ibm-configuration": {
        "gateway": "datapower-api-gateway",
        "type": "rest",
        "phase": "realized",
        "enforced": true,
        "testable": true,
        "cors": {
            "enabled": true
        },
        "assembly": {
            "execute": [
                {
                    "invoke": {
                        "version": "2.0.0",
                        "title": "invoke",
                        "header-control": {
                            "type": "blacklist",
                            "values": [
                            ]
                        },
                        "parameter-control": {
                            "type": "whitelist",
                            "values": [
                            ]
                        },
                        "timeout": 60,
                        "verb": "keep",
                        "cache-response": "protocol",
                        "cache-ttl": 900,
                        "stop-on-error": [
                        ],
                        "target-url": "$(target-url)$(api.operation.path)$(request.search)"
                    }
                }
            ],
            "catch": [
            ]
        },
        "properties": {
            "target-url": {
                "value": "https://localhost/fhir-server/api/v4/",
                "description": "The URL of the target service",
                "encoded": false
            }
        },
        "activity-log": {
            "enabled": true,
            "error-content": "header",
            "success-content": "activity"
        },
        "application-authentication": {
            "certificate": false
        },
        "catalogs": {
        }
    },
    "tags": [
        {
            "name": "Task"
        }
    ],
    "paths": {
        "/Task": {
            "post": {
                "tags": [
                    "Task"
                ],
                "summary": "Create a Task resource",
                "operationId": "createTask",
                "responses": {
                    "201": {
                        "description": "Create Task operation successful"
                    }
                },
                "requestBody": {
                    "$ref": "#/components/requestBodies/Task"
                }
            },
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Search for Task resources",
                "operationId": "searchTask",
                "parameters": [
                    {
                        "name": "requester",
                        "description": "Search by task requester",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "owner",
                        "description": "Search by task owner",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "business-status",
                        "description": "Search by business status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "identifier",
                        "description": "Search for a task instance by its business identifier",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "period",
                        "description": "Search by period Task is/was underway",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "code",
                        "description": "Search by task code",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "performer",
                        "description": "Search by recommended type of performer (e.g., Requester, Performer, Scheduler).",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "subject",
                        "description": "Search by subject",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "focus",
                        "description": "Search by task focus",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "part-of",
                        "description": "Search by task this task is part of",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "encounter",
                        "description": "Search by encounter",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "authored-on",
                        "description": "Search by creation date",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "priority",
                        "description": "Search by task priority",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "intent",
                        "description": "Search by task intent",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "group-identifier",
                        "description": "Search by group identifier",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "based-on",
                        "description": "Search by requests this task is based on",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "patient",
                        "description": "Search by patient",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "modified",
                        "description": "Search by last modification date",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "status",
                        "description": "Search by task status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/_profileParam"
                    },
                    {
                        "$ref": "#/components/parameters/_lastUpdatedParam"
                    },
                    {
                        "$ref": "#/components/parameters/_tagParam"
                    },
                    {
                        "$ref": "#/components/parameters/_securityParam"
                    },
                    {
                        "$ref": "#/components/parameters/_sourceParam"
                    },
                    {
                        "$ref": "#/components/parameters/_idParam"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Search Task operation successful",
                        "content": {
                            "application/fhir+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Task/{id}/_history/{vid}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Read specific version of a Task resource",
                "operationId": "vreadTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "logical identifier",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vid",
                        "in": "path",
                        "required": true,
                        "description": "version identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Versioned read Task operation successful",
                        "content": {
                            "application/fhir+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/Task/{id}": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Read a Task resource",
                "operationId": "readTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "logical identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Read Task operation successful",
                        "content": {
                            "application/fhir+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Task"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Task"
                ],
                "summary": "Update an existing Task resource",
                "operationId": "updateTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "logical identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Update Task operation successful"
                    },
                    "201": {
                        "description": "Create Task operation successful (requires 'updateCreateEnabled' configuration option)"
                    }
                },
                "requestBody": {
                    "$ref": "#/components/requestBodies/Task"
                }
            },
            "delete": {
                "tags": [
                    "Task"
                ],
                "summary": "Delete a Task resource",
                "operationId": "deleteTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "logical identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete Task operation successful"
                    }
                }
            }
        },
        "/Task/{id}/_history": {
            "get": {
                "tags": [
                    "Task"
                ],
                "summary": "Return the history of a Task resource",
                "operationId": "historyTask",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "logical identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "History Task operation successful",
                        "content": {
                            "application/fhir+json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bundle"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "parameters": {
            "_profileParam": {
                "name": "_profile",
                "description": "Profiles this resource claims to conform to",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "_lastUpdatedParam": {
                "name": "_lastUpdated",
                "description": "When the resource version last changed",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "_tagParam": {
                "name": "_tag",
                "description": "Tags applied to this resource",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "_securityParam": {
                "name": "_security",
                "description": "Security Labels applied to this resource",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "_sourceParam": {
                "name": "_source",
                "description": "Identifies where the resource comes from",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "_idParam": {
                "name": "_id",
                "description": "Logical id of this artifact",
                "in": "query",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "requestBodies": {
            "Task": {
                "content": {
                    "application/fhir+json": {
                        "schema": {
                            "$ref": "#/components/schemas/Task"
                        }
                    }
                },
                "required": true
            }
        },
        "schemas": {
            "Resource": {
                "type": "object",
                "discriminator": "resourceType",
                "properties": {
                    "resourceType": {
                        "type": "string",
                        "enum": [
                            "Account",
                            "ActivityDefinition",
                            "AdverseEvent",
                            "AllergyIntolerance",
                            "Appointment",
                            "AppointmentResponse",
                            "AuditEvent",
                            "Basic",
                            "Binary",
                            "BiologicallyDerivedProduct",
                            "BodyStructure",
                            "Bundle",
                            "CapabilityStatement",
                            "CarePlan",
                            "CareTeam",
                            "CatalogEntry",
                            "ChargeItem",
                            "ChargeItemDefinition",
                            "Claim",
                            "ClaimResponse",
                            "ClinicalImpression",
                            "CodeSystem",
                            "Communication",
                            "CommunicationRequest",
                            "CompartmentDefinition",
                            "Composition",
                            "ConceptMap",
                            "Condition",
                            "Consent",
                            "Contract",
                            "Coverage",
                            "CoverageEligibilityRequest",
                            "CoverageEligibilityResponse",
                            "DetectedIssue",
                            "Device",
                            "DeviceDefinition",
                            "DeviceMetric",
                            "DeviceRequest",
                            "DeviceUseStatement",
                            "DiagnosticReport",
                            "DocumentManifest",
                            "DocumentReference",
                            "DomainResource",
                            "EffectEvidenceSynthesis",
                            "Encounter",
                            "Endpoint",
                            "EnrollmentRequest",
                            "EnrollmentResponse",
                            "EpisodeOfCare",
                            "EventDefinition",
                            "Evidence",
                            "EvidenceVariable",
                            "ExampleScenario",
                            "ExplanationOfBenefit",
                            "FamilyMemberHistory",
                            "Flag",
                            "Goal",
                            "GraphDefinition",
                            "Group",
                            "GuidanceResponse",
                            "HealthcareService",
                            "ImagingStudy",
                            "Immunization",
                            "ImmunizationEvaluation",
                            "ImmunizationRecommendation",
                            "ImplementationGuide",
                            "InsurancePlan",
                            "Invoice",
                            "Library",
                            "Linkage",
                            "List",
                            "Location",
                            "Measure",
                            "MeasureReport",
                            "Media",
                            "Medication",
                            "MedicationAdministration",
                            "MedicationDispense",
                            "MedicationKnowledge",
                            "MedicationRequest",
                            "MedicationStatement",
                            "MedicinalProduct",
                            "MedicinalProductAuthorization",
                            "MedicinalProductContraindication",
                            "MedicinalProductIndication",
                            "MedicinalProductIngredient",
                            "MedicinalProductInteraction",
                            "MedicinalProductManufactured",
                            "MedicinalProductPackaged",
                            "MedicinalProductPharmaceutical",
                            "MedicinalProductUndesirableEffect",
                            "MessageDefinition",
                            "MessageHeader",
                            "MolecularSequence",
                            "NamingSystem",
                            "NutritionOrder",
                            "Observation",
                            "ObservationDefinition",
                            "OperationDefinition",
                            "OperationOutcome",
                            "Organization",
                            "OrganizationAffiliation",
                            "Parameters",
                            "Patient",
                            "PaymentNotice",
                            "PaymentReconciliation",
                            "Person",
                            "PlanDefinition",
                            "Practitioner",
                            "PractitionerRole",
                            "Procedure",
                            "Provenance",
                            "Questionnaire",
                            "QuestionnaireResponse",
                            "RelatedPerson",
                            "RequestGroup",
                            "ResearchDefinition",
                            "ResearchElementDefinition",
                            "ResearchStudy",
                            "ResearchSubject",
                            "Resource",
                            "RiskAssessment",
                            "RiskEvidenceSynthesis",
                            "Schedule",
                            "SearchParameter",
                            "ServiceRequest",
                            "Slot",
                            "Specimen",
                            "SpecimenDefinition",
                            "StructureDefinition",
                            "StructureMap",
                            "Subscription",
                            "Substance",
                            "SubstanceNucleicAcid",
                            "SubstancePolymer",
                            "SubstanceProtein",
                            "SubstanceReferenceInformation",
                            "SubstanceSourceMaterial",
                            "SubstanceSpecification",
                            "SupplyDelivery",
                            "SupplyRequest",
                            "Task",
                            "TerminologyCapabilities",
                            "TestReport",
                            "TestScript",
                            "ValueSet",
                            "VerificationResult",
                            "VisionPrescription"
                        ]
                    },
                    "id": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                        "description": "The logical id of the resource, as used in the URL for the resource. Once assigned, this value never changes."
                    },
                    "meta": {
                        "$ref": "#/components/schemas/Meta",
                        "description": "The metadata about the resource. This is content that is maintained by the infrastructure. Changes to the content might not always be associated with version changes to the resource."
                    },
                    "implicitRules": {
                        "type": "string",
                        "pattern": "\\S*",
                        "description": "A reference to a set of rules that were followed when the resource was constructed, and which must be understood when processing the content. Often, this is a reference to an implementation guide that defines the special rules along with other profiles etc."
                    },
                    "language": {
                        "type": "string",
                        "pattern": "[^\\s]+(\\s[^\\s]+)*",
                        "description": "The base language in which the resource is written."
                    }
                },
                "required": [
                    "resourceType"
                ]
            },
            "DomainResource": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Resource"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "text": {
                                "$ref": "#/components/schemas/Narrative",
                                "description": "A human&ndash;readable narrative that contains a summary of the resource and can be used to represent the content of the resource to a human. The narrative need not encode all the structured data, but is required to contain sufficient detail to make it \"clinically safe\" for a human to just read the narrative. Resource definitions may define what content should be represented in the narrative to ensure clinical safety."
                            },
                            "contained": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Resource",
                                    "description": "These resources do not have an independent existence apart from the resource that contains them &ndash; they cannot be identified independently, and nor can they have their own independent transaction scope."
                                }
                            },
                            "extension": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Extension",
                                    "description": "May be used to represent additional information that is not part of the basic definition of the resource. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."
                                }
                            },
                            "modifierExtension": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Extension",
                                    "description": "May be used to represent additional information that is not part of the basic definition of the resource and that modifies the understanding of the element that contains it and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer is allowed to define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."
                                }
                            }
                        }
                    }
                ]
            },
            "Task": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DomainResource"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Identifier",
                                    "description": "The business identifier for this task."
                                }
                            },
                            "instantiatesCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The URL pointing to a *FHIR*&ndash;defined protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task."
                            },
                            "instantiatesUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The URL pointing to an *externally* maintained  protocol, guideline, orderset or other definition that is adhered to in whole or in part by this Task."
                            },
                            "basedOn": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Reference",
                                    "description": "BasedOn refers to a higher&ndash;level authorization that triggered the creation of the task.  It references a \"request\" resource such as a ServiceRequest, MedicationRequest, ServiceRequest, CarePlan, etc. which is distinct from the \"request\" resource the task is seeking to fulfill.  This latter resource is referenced by FocusOn.  For example, based on a ServiceRequest (= BasedOn), a task is created to fulfill a procedureRequest ( = FocusOn ) to collect a specimen from a patient."
                                }
                            },
                            "groupIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "An identifier that links together multiple tasks and other requests that were created in the same context."
                            },
                            "partOf": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Reference",
                                    "description": "Task that this particular task is part of."
                                }
                            },
                            "status": {
                                "type": "string",
                                "enum": [
                                    "draft",
                                    "requested",
                                    "received",
                                    "accepted",
                                    "rejected",
                                    "ready",
                                    "cancelled",
                                    "in-progress",
                                    "on-hold",
                                    "failed",
                                    "completed",
                                    "entered-in-error"
                                ],
                                "description": "The current status of the task."
                            },
                            "statusReason": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "An explanation as to why this task is held, failed, was refused, etc."
                            },
                            "businessStatus": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Contains business&ndash;specific nuances of the business state."
                            },
                            "intent": {
                                "type": "string",
                                "enum": [
                                    "unknown",
                                    "proposal",
                                    "plan",
                                    "order",
                                    "original-order",
                                    "reflex-order",
                                    "filler-order",
                                    "instance-order",
                                    "option"
                                ],
                                "description": "Indicates the \"level\" of actionability associated with the Task, i.e. i+R[9]Cs this a proposed task, a planned task, an actionable task, etc."
                            },
                            "priority": {
                                "type": "string",
                                "enum": [
                                    "routine",
                                    "urgent",
                                    "asap",
                                    "stat"
                                ],
                                "description": "Indicates how quickly the Task should be addressed with respect to other requests."
                            },
                            "code": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "A name or code (or both) briefly describing what the task involves."
                            },
                            "description": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A free&ndash;text description of what is to be performed."
                            },
                            "focus": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The request being actioned or the resource being manipulated by this task."
                            },
                            "for": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The entity who benefits from the performance of the service specified in the task (e.g., the patient)."
                            },
                            "encounter": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The healthcare event  (e.g. a patient and healthcare provider interaction) during which this task was created."
                            },
                            "executionPeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Identifies the time action was first taken against the task (start) and/or the time final action was taken against the task prior to marking it as completed (end)."
                            },
                            "authoredOn": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The date and time this task was created."
                            },
                            "lastModified": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The date and time of last modification to this task."
                            },
                            "requester": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The creator of the task."
                            },
                            "performerType": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CodeableConcept",
                                    "description": "The kind of participant that should perform the task."
                                }
                            },
                            "owner": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "Individual organization or Device currently responsible for task execution."
                            },
                            "location": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "Principal physical location where the this task is performed."
                            },
                            "reasonCode": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "A description or code indicating why this task needs to be performed."
                            },
                            "reasonReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "A resource reference indicating why this task needs to be performed."
                            },
                            "insurance": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Reference",
                                    "description": "Insurance plans, coverage extensions, pre&ndash;authorizations and/or pre&ndash;determinations that may be relevant to the Task."
                                }
                            },
                            "note": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Annotation",
                                    "description": "Free&ndash;text information captured about the task as it progresses."
                                }
                            },
                            "relevantHistory": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Reference",
                                    "description": "Links to Provenance records for past versions of this Task that identify key state transitions or updates that are likely to be relevant to a user looking at the current version of the task."
                                }
                            },
                            "restriction": {
                                "$ref": "#/components/schemas/Task_Restriction",
                                "description": "If the Task.focus is a request resource and the task is seeking fulfillment (i.e. is asking for the request to be actioned), this element identifies any limitations on what parts of the referenced request should be actioned."
                            },
                            "input": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Task_Input",
                                    "description": "Additional information that may be needed in the execution of the task."
                                }
                            },
                            "output": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Task_Output",
                                    "description": "Outputs produced by the Task."
                                }
                            }
                        },
                        "required": [
                            "status",
                            "intent"
                        ]
                    }
                ],
                "example": {
                    "resourceType": "Task",
                    "meta": {
                        "versionId": "abMzXgnL7t",
                        "lastUpdated": "2020-11-04T11:22:40.889943-05:00",
                        "source": "A8Eh5BaIaD",
                        "profile": [
                            "mDBBeDAOSM"
                        ],
                        "security": [
                            {
                                "system": "KlLirrSEmi",
                                "version": "X2_kJDtu_R",
                                "code": "VDcyQXjMtY",
                                "display": "wbAQq2hIeu",
                                "userSelected": true
                            }
                        ],
                        "tag": [
                            {
                                "system": "jwwqHvAzen",
                                "version": "J4bwNz7f7P",
                                "code": "uEiutr1dXE",
                                "display": "pMGZEcd2zq",
                                "userSelected": true
                            },
                            {
                                "code": "ibm/complete-mock"
                            }
                        ]
                    },
                    "implicitRules": "gOpqYnfHWl",
                    "language": "en-US",
                    "text": {
                        "status": "extensions",
                        "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"></div>"
                    },
                    "identifier": [
                        {
                            "use": "usual",
                            "type": {
                                "coding": [
                                    {
                                        "system": "Agjx0OvcjW",
                                        "version": "JD6qM188Xq",
                                        "code": "_YeajvL2eO",
                                        "display": "1VEkGaHjBL",
                                        "userSelected": true
                                    }
                                ],
                                "text": "uD0Hu80GOU"
                            },
                            "system": "AITs5KCmbq",
                            "value": "biH_qY4wke",
                            "period": {
                                "start": "2020-11-04T11:22:40.894574-05:00",
                                "end": "2020-11-04T11:22:40.894919-05:00"
                            }
                        }
                    ],
                    "instantiatesCanonical": "xhjGNrB7AK",
                    "instantiatesUri": "Xh2JxYxirU",
                    "basedOn": [
                        {
                            "reference": "Basic/prk_pdFZK7",
                            "type": "Basic",
                            "identifier": {
                                "use": "secondary",
                                "type": {
                                    "coding": [
                                        {
                                            "system": "g6Rnv7Bhwb",
                                            "version": "ijWAC4fCO0",
                                            "code": "LoiLtTptHW",
                                            "display": "P77nh36h4v",
                                            "userSelected": true
                                        }
                                    ],
                                    "text": "T5k_XRFfKi"
                                },
                                "system": "kS6cDVncLN",
                                "value": "8trwlTli1p",
                                "period": {
                                    "start": "2020-11-04T11:22:40.896508-05:00",
                                    "end": "2020-11-04T11:22:40.896699-05:00"
                                }
                            },
                            "display": "cGzI_qFwzL"
                        }
                    ],
                    "groupIdentifier": {
                        "use": "temp",
                        "type": {
                            "coding": [
                                {
                                    "system": "cG4SBHooqI",
                                    "version": "BNPBNoQVoy",
                                    "code": "8W953b1s42",
                                    "display": "5_NPKtosEU",
                                    "userSelected": true
                                }
                            ],
                            "text": "PhJbkR4K43"
                        },
                        "system": "nY0j1OHtrA",
                        "value": "CebAYgInQH",
                        "period": {
                            "start": "2020-11-04T11:22:40.89777-05:00",
                            "end": "2020-11-04T11:22:40.897946-05:00"
                        }
                    },
                    "partOf": [
                        {
                            "reference": "Task/amKNkRP2Nu",
                            "type": "Task",
                            "identifier": {
                                "use": "secondary",
                                "type": {
                                    "coding": [
                                        {
                                            "system": "OEDeLF_iIo",
                                            "version": "4bAW9S7aXm",
                                            "code": "inFfPB2APX",
                                            "display": "FRug0xFWtq",
                                            "userSelected": true
                                        }
                                    ],
                                    "text": "xbWxdLnPMB"
                                },
                                "system": "oZem2Jmj0L",
                                "value": "26zEed0bru",
                                "period": {
                                    "start": "2020-11-04T11:22:40.89954-05:00",
                                    "end": "2020-11-04T11:22:40.899868-05:00"
                                }
                            },
                            "display": "mFQQm4uyWn"
                        }
                    ],
                    "status": "accepted",
                    "statusReason": {
                        "coding": [
                            {
                                "system": "rKNZzNgDvQ",
                                "version": "vNGbBNE7vW",
                                "code": "umAiHBV0BE",
                                "display": "zPyBoQA1FR",
                                "userSelected": true
                            }
                        ],
                        "text": "7qjIvk96wS"
                    },
                    "businessStatus": {
                        "coding": [
                            {
                                "system": "ek444sp5uL",
                                "version": "ujIemoSi0R",
                                "code": "ubp_qd1vZY",
                                "display": "15zSlFhSiM",
                                "userSelected": true
                            }
                        ],
                        "text": "bYUHuvEUaq"
                    },
                    "intent": "unknown",
                    "priority": "asap",
                    "code": {
                        "coding": [
                            {
                                "system": "rFMT4LCoqa",
                                "version": "qCpXmFXcUU",
                                "code": "pZOWKVGI63",
                                "display": "Jz1hcgRdoc",
                                "userSelected": true
                            }
                        ],
                        "text": "X1lgOMcbac"
                    },
                    "description": "xQ5SILUdd7",
                    "focus": {
                        "reference": "Basic/M_CinqDYUi",
                        "type": "Basic",
                        "identifier": {
                            "use": "usual",
                            "type": {
                                "coding": [
                                    {
                                        "system": "wXL9JoYm7q",
                                        "version": "CMvBf8LEkI",
                                        "code": "dWYZ3403UH",
                                        "display": "vgDV3kj9Yh",
                                        "userSelected": true
                                    }
                                ],
                                "text": "yYIA1mQohV"
                            },
                            "system": "jdFUpcoOsO",
                            "value": "RN7eIzKcmd",
                            "period": {
                                "start": "2020-11-04T11:22:40.905002-05:00",
                                "end": "2020-11-04T11:22:40.905225-05:00"
                            }
                        },
                        "display": "_hQz8Fj6Wk"
                    },
                    "for": {
                        "reference": "Basic/HbmKvVZkYN",
                        "type": "Basic",
                        "identifier": {
                            "use": "old",
                            "type": {
                                "coding": [
                                    {
                                        "system": "4HizdPrgAT",
                                        "version": "dwvmMuIaeE",
                                        "code": "cgGjRNixOO",
                                        "display": "zk7EakN8oq",
                                        "userSelected": true
                                    }
                                ],
                                "text": "5EioMPW5R_"
                            },
                            "system": "ZIcc2777n_",
                            "value": "f1ZncZ7qpS",
                            "period": {
                                "start": "2020-11-04T11:22:40.90644-05:00",
                                "end": "2020-11-04T11:22:40.906625-05:00"
                            }
                        },
                        "display": "SBSY2w2siu"
                    },
                    "encounter": {
                        "reference": "Encounter/eRPu_594z6",
                        "type": "Encounter",
                        "identifier": {
                            "use": "official",
                            "type": {
                                "coding": [
                                    {
                                        "system": "NGcMS1lXRJ",
                                        "version": "Tv14h_UKta",
                                        "code": "cGLRK6vK7V",
                                        "display": "J0Uo0M9TLy",
                                        "userSelected": true
                                    }
                                ],
                                "text": "z_9QQ3cnPF"
                            },
                            "system": "rTsjxIKTGt",
                            "value": "0RqcDK698o",
                            "period": {
                                "start": "2020-11-04T11:22:40.907776-05:00",
                                "end": "2020-11-04T11:22:40.907995-05:00"
                            }
                        },
                        "display": "c5WtzDFbmq"
                    },
                    "executionPeriod": {
                        "start": "2020-11-04T11:22:40.908236-05:00",
                        "end": "2020-11-04T11:22:40.908427-05:00"
                    },
                    "lastModified": "2020-11-04T11:22:40.908589-05:00",
                    "requester": {
                        "reference": "Device/ZYONXtU3ts",
                        "type": "Device",
                        "identifier": {
                            "use": "temp",
                            "type": {
                                "coding": [
                                    {
                                        "system": "KAfdCud2Fi",
                                        "version": "PywgMPENiJ",
                                        "code": "FDLC1gq_8h",
                                        "display": "a5nuZZNy5l",
                                        "userSelected": true
                                    }
                                ],
                                "text": "aeoHfUsXmo"
                            },
                            "system": "Ilfkdtyn6V",
                            "value": "3K0CBVK7NF",
                            "period": {
                                "start": "2020-11-04T11:22:40.909558-05:00",
                                "end": "2020-11-04T11:22:40.909726-05:00"
                            }
                        },
                        "display": "tUxfq2FeZ1"
                    },
                    "performerType": [
                        {
                            "coding": [
                                {
                                    "system": "Wz83KYSPdK",
                                    "version": "3ec_QTwIcO",
                                    "code": "GdrXzvtgzh",
                                    "display": "jZv8omVl6l",
                                    "userSelected": true
                                }
                            ],
                            "text": "lazxJtfUm0"
                        }
                    ],
                    "owner": {
                        "reference": "Practitioner/rK_Y8x0A5L",
                        "type": "Practitioner",
                        "identifier": {
                            "use": "secondary",
                            "type": {
                                "coding": [
                                    {
                                        "system": "aUew5PtZ_P",
                                        "version": "cABTshPbDJ",
                                        "code": "vm0830Y_1T",
                                        "display": "FoUdPJOXmM",
                                        "userSelected": true
                                    }
                                ],
                                "text": "J1oyINemVu"
                            },
                            "system": "Me5xHtGQpu",
                            "value": "xVqM0fS9qJ",
                            "period": {
                                "start": "2020-11-04T11:22:40.911301-05:00",
                                "end": "2020-11-04T11:22:40.91148-05:00"
                            }
                        },
                        "display": "wIkL6We91N"
                    },
                    "location": {
                        "reference": "Location/_748PSscNR",
                        "type": "Location",
                        "identifier": {
                            "use": "usual",
                            "type": {
                                "coding": [
                                    {
                                        "system": "spIBugEwix",
                                        "version": "H5agCy0ayu",
                                        "code": "4BaG7GLAqM",
                                        "display": "jIocmbILE8",
                                        "userSelected": true
                                    }
                                ],
                                "text": "VDZrt0tO1y"
                            },
                            "system": "0WtjT_VOqD",
                            "value": "nSoDmH_pgp",
                            "period": {
                                "start": "2020-11-04T11:22:40.91246-05:00",
                                "end": "2020-11-04T11:22:40.91262-05:00"
                            }
                        },
                        "display": "cUVrZJPpEw"
                    },
                    "reasonCode": {
                        "coding": [
                            {
                                "system": "CxlcOpMIUF",
                                "version": "MBqmnX2bwY",
                                "code": "cwc0BzIDiN",
                                "display": "sv8KYe2jBp",
                                "userSelected": true
                            }
                        ],
                        "text": "uBWccMSLPK"
                    },
                    "reasonReference": {
                        "reference": "Basic/km9vqShSR6",
                        "type": "Basic",
                        "identifier": {
                            "use": "secondary",
                            "type": {
                                "coding": [
                                    {
                                        "system": "mhOSHf8nUf",
                                        "version": "O5uLJxoAFz",
                                        "code": "6dl91hTxs1",
                                        "display": "JAzSz_ZyYX",
                                        "userSelected": true
                                    }
                                ],
                                "text": "7cVuQFyzdw"
                            },
                            "system": "04ggSice_h",
                            "value": "5TDpzifa_j",
                            "period": {
                                "start": "2020-11-04T11:22:40.913988-05:00",
                                "end": "2020-11-04T11:22:40.914146-05:00"
                            }
                        },
                        "display": "tY5tLf_V3P"
                    },
                    "insurance": [
                        {
                            "reference": "Coverage/Ys5gHehD6e",
                            "type": "Coverage",
                            "identifier": {
                                "use": "old",
                                "type": {
                                    "coding": [
                                        {
                                            "system": "t78FmZ5XyL",
                                            "version": "6y7tHavbYL",
                                            "code": "Pb5lp9CdAn",
                                            "display": "hGx5mm_s9Q",
                                            "userSelected": true
                                        }
                                    ],
                                    "text": "reL5OGfBFc"
                                },
                                "system": "KeG7i0EaZ3",
                                "value": "hgwKuKMB7r",
                                "period": {
                                    "start": "2020-11-04T11:22:40.915108-05:00",
                                    "end": "2020-11-04T11:22:40.915265-05:00"
                                }
                            },
                            "display": "4LP5V1sOnf"
                        }
                    ],
                    "note": [
                        {
                            "authorReference": {
                                "reference": "Practitioner/TEuvzIoiW2",
                                "type": "Practitioner",
                                "identifier": {
                                    "use": "official",
                                    "type": {
                                        "coding": [
                                            {
                                                "system": "J9YK5pn6sr",
                                                "version": "_LGU14E8Qm",
                                                "code": "CqMqONtJJz",
                                                "display": "yLML_BUTfr",
                                                "userSelected": true
                                            }
                                        ],
                                        "text": "HEtjReSQZ2"
                                    },
                                    "system": "aPBi_cvP4T",
                                    "value": "kMvSFXMxwq",
                                    "period": {
                                        "start": "2020-11-04T11:22:40.916202-05:00",
                                        "end": "2020-11-04T11:22:40.916356-05:00"
                                    }
                                },
                                "display": "auWhZTDLmA"
                            },
                            "time": "2020-11-04T11:22:40.916567-05:00",
                            "text": "5ZQqPGKHra"
                        }
                    ],
                    "relevantHistory": [
                        {
                            "reference": "Provenance/DHe4BBXc38",
                            "type": "Provenance",
                            "identifier": {
                                "use": "secondary",
                                "type": {
                                    "coding": [
                                        {
                                            "system": "fgWZrQHOre",
                                            "version": "P8Skh9u45x",
                                            "code": "3RRd5_ryMk",
                                            "display": "QccQdJ4OrZ",
                                            "userSelected": true
                                        }
                                    ],
                                    "text": "tuRUjKSnu5"
                                },
                                "system": "Jwkl7iDvTz",
                                "value": "3JPmDHLHmB",
                                "period": {
                                    "start": "2020-11-04T11:22:40.917518-05:00",
                                    "end": "2020-11-04T11:22:40.917671-05:00"
                                }
                            },
                            "display": "YZe3_F2mn_"
                        }
                    ],
                    "restriction": {
                        "repetitions": 103758801,
                        "period": {
                            "start": "2020-11-04T11:22:40.918212-05:00",
                            "end": "2020-11-04T11:22:40.918375-05:00"
                        },
                        "recipient": [
                            {
                                "reference": "Patient/UoYLOOrqRn",
                                "type": "Patient",
                                "identifier": {
                                    "use": "old",
                                    "type": {
                                        "coding": [
                                            {
                                                "system": "htqCSntEWc",
                                                "version": "GUWsZK6r7k",
                                                "code": "0OmsPOL60O",
                                                "display": "ZbNUQYO6rj",
                                                "userSelected": true
                                            }
                                        ],
                                        "text": "7ejYGiaof5"
                                    },
                                    "system": "vTuiJoJIf4",
                                    "value": "jWjUf8Tzve",
                                    "period": {
                                        "start": "2020-11-04T11:22:40.919262-05:00",
                                        "end": "2020-11-04T11:22:40.919416-05:00"
                                    }
                                },
                                "display": "IvABkE03RK"
                            }
                        ]
                    },
                    "input": [
                        {
                            "type": {
                                "coding": [
                                    {
                                        "system": "WGjJkPyYPZ",
                                        "version": "CBS8_Nt7Fz",
                                        "code": "AlQcvMqEhc",
                                        "display": "uvIoKDjHkr",
                                        "userSelected": true
                                    }
                                ],
                                "text": "PkFoRXb3fb"
                            },
                            "valueBase64Binary": "KHBdcxU="
                        }
                    ],
                    "output": [
                        {
                            "type": {
                                "coding": [
                                    {
                                        "system": "rv0EQjP_Aa",
                                        "version": "okRb88gwhv",
                                        "code": "oNHMyPEXcb",
                                        "display": "zqZyiu9qLo",
                                        "userSelected": true
                                    }
                                ],
                                "text": "Av2rKdC2TI"
                            },
                            "valueBase64Binary": "aGVTBjY="
                        }
                    ]
                }
            },
            "Bundle": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Resource"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "A persistent identifier for the bundle that won't change as a bundle is copied from server to server."
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "document",
                                    "message",
                                    "transaction",
                                    "transaction-response",
                                    "batch",
                                    "batch-response",
                                    "history",
                                    "searchset",
                                    "collection"
                                ],
                                "description": "Indicates the purpose of this bundle &ndash; how it is intended to be used."
                            },
                            "timestamp": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The date/time that the bundle was assembled &ndash; i.e. when the resources were placed in the bundle."
                            },
                            "total": {
                                "type": "integer",
                                "format": "int32",
                                "description": "If a set of search matches, this is the total number of entries of type 'match' across all pages in the search.  It does not include search.mode = 'include' or 'outcome' entries and it does not provide a count of the number of entries in the Bundle."
                            },
                            "link": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Bundle_Link",
                                    "description": "A series of links that provide context to this bundle."
                                }
                            },
                            "entry": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Bundle_Entry",
                                    "description": "An entry in a bundle resource &ndash; will either contain a resource or information about a resource (transactions and history only)."
                                }
                            },
                            "signature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "Digital Signature &ndash; base64 encoded. XML&ndash;DSig or a JWT."
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ],
                "example": {
                    "resourceType": "Bundle",
                    "meta": {
                        "versionId": "F7bitzw1Hj",
                        "lastUpdated": "2020-11-04T11:22:43.502316-05:00",
                        "source": "JRkgOa8bwm",
                        "profile": [
                            "i4gpGowr6Y"
                        ],
                        "security": [
                            {
                                "system": "lTnQF4OV3w",
                                "version": "hTth0i4Ivs",
                                "code": "P6iXDX6DcV",
                                "display": "rMonvtKiO8",
                                "userSelected": true
                            }
                        ],
                        "tag": [
                            {
                                "system": "4HA_3UN6ab",
                                "version": "FvMU1dv9n6",
                                "code": "AjrpSN9l0q",
                                "display": "V3cjH6t7zX",
                                "userSelected": true
                            },
                            {
                                "code": "ibm/complete-mock"
                            }
                        ]
                    },
                    "implicitRules": "IUOLjdM2gr",
                    "language": "en-US",
                    "identifier": {
                        "use": "temp",
                        "type": {
                            "coding": [
                                {
                                    "system": "GG7NhXNGqZ",
                                    "version": "hTXMVyhLkS",
                                    "code": "fimixp8PMa",
                                    "display": "aYmxIkjI7w",
                                    "userSelected": true
                                }
                            ],
                            "text": "znbNwNNzOo"
                        },
                        "system": "zxGBnkW0WU",
                        "value": "lpcL4XUHKZ",
                        "period": {
                            "start": "2020-11-04T11:22:43.507146-05:00",
                            "end": "2020-11-04T11:22:43.507335-05:00"
                        }
                    },
                    "type": "document",
                    "timestamp": "2020-11-04T11:22:43.507779-05:00",
                    "total": 804618139,
                    "link": [
                        {
                            "relation": "0h9oqVMQIt",
                            "url": "N6t6uzHuIy"
                        }
                    ],
                    "entry": [
                        {
                            "link": [
                                {
                                    "relation": "IWG3UO5Awa",
                                    "url": "MJBFG1zxnb"
                                }
                            ],
                            "fullUrl": "PKkErHU9RX",
                            "search": {
                                "mode": "match",
                                "score": 0.78276202450637411001110876895836554467678070068359375
                            },
                            "request": {
                                "method": "DELETE",
                                "url": "EX5t3mSMJh",
                                "ifNoneMatch": "TXPgvN30LK",
                                "ifModifiedSince": "2020-11-04T11:22:43.514903-05:00",
                                "ifMatch": "ESkJi0jaVC",
                                "ifNoneExist": "fuSskChKIq"
                            },
                            "response": {
                                "status": "avVXy1xkRq",
                                "location": "v0Ub50vvWL",
                                "etag": "BmCLcXDNuX",
                                "lastModified": "2020-11-04T11:22:43.516375-05:00"
                            }
                        }
                    ],
                    "signature": {
                        "type": [
                            {
                                "system": "YievdsQnmM",
                                "version": "3um1GW4GVD",
                                "code": "sNUnxWccmG",
                                "display": "pqCTozifNV",
                                "userSelected": true
                            }
                        ],
                        "when": "2020-11-04T11:22:43.518017-05:00",
                        "who": {
                            "reference": "Practitioner/7tLbieRmnA",
                            "type": "Practitioner",
                            "identifier": {
                                "use": "secondary",
                                "type": {
                                    "coding": [
                                        {
                                            "system": "9BzciHf_0T",
                                            "version": "em1dSVwNdC",
                                            "code": "LD7gU1VdIa",
                                            "display": "l_je45PsqP",
                                            "userSelected": true
                                        }
                                    ],
                                    "text": "Kd2TxyCZR7"
                                },
                                "system": "pACafNTDh7",
                                "value": "_hcXO_NlZg",
                                "period": {
                                    "start": "2020-11-04T11:22:43.519783-05:00",
                                    "end": "2020-11-04T11:22:43.520066-05:00"
                                }
                            },
                            "display": "l79nsD4sN6"
                        },
                        "onBehalfOf": {
                            "reference": "Practitioner/LiWB2VJ2UG",
                            "type": "Practitioner",
                            "identifier": {
                                "use": "official",
                                "type": {
                                    "coding": [
                                        {
                                            "system": "64W3kvPnCz",
                                            "version": "1LnrLVgWre",
                                            "code": "oHtu3WoiKi",
                                            "display": "gMKD8fdCjt",
                                            "userSelected": true
                                        }
                                    ],
                                    "text": "bu5V13p166"
                                },
                                "system": "Graf7De_yt",
                                "value": "UWJRgHe9wr",
                                "period": {
                                    "start": "2020-11-04T11:22:43.544663-05:00",
                                    "end": "2020-11-04T11:22:43.545138-05:00"
                                }
                            },
                            "display": "kQ5612idGd"
                        },
                        "targetFormat": "AQCVaUpSER",
                        "sigFormat": "FxtGIjypV6",
                        "data": "dUUnF3I="
                    }
                }
            },
            "OperationOutcome": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/DomainResource"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "issue": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/OperationOutcome_Issue",
                                    "description": "An error, warning, or information message that results from a system action."
                                },
                                "minItems": 1
                            }
                        },
                        "required": [
                            "issue"
                        ]
                    }
                ],
                "example": {
                    "resourceType": "OperationOutcome",
                    "meta": {
                        "versionId": "q63JAUPuUM",
                        "lastUpdated": "2020-11-04T11:22:40.494613-05:00",
                        "source": "lwnaIGbKJn",
                        "profile": [
                            "XGQPxL1j9k"
                        ],
                        "security": [
                            {
                                "system": "sPgaKWp0jQ",
                                "version": "wZHLBfjatw",
                                "code": "DMQqy4R3E8",
                                "display": "mmxOeLn3hG",
                                "userSelected": true
                            }
                        ],
                        "tag": [
                            {
                                "system": "MtLYCBYPWS",
                                "version": "8Ak7HZQrke",
                                "code": "0DRWc7UuJB",
                                "display": "6NXvm6cEoG",
                                "userSelected": true
                            },
                            {
                                "code": "ibm/complete-mock"
                            }
                        ]
                    },
                    "implicitRules": "siFyYo720q",
                    "language": "en-US",
                    "text": {
                        "status": "generated",
                        "div": "<div xmlns=\"http://www.w3.org/1999/xhtml\"></div>"
                    },
                    "issue": [
                        {
                            "severity": "fatal",
                            "code": "required",
                            "details": {
                                "coding": [
                                    {
                                        "system": "YAwo1XN_fv",
                                        "version": "9ycWn1vQBR",
                                        "code": "Y4ci7ASL_1",
                                        "display": "lq_CJ5bq6Z",
                                        "userSelected": true
                                    }
                                ],
                                "text": "aWHd4ZkhaW"
                            },
                            "diagnostics": "yew1JE2w0X",
                            "location": [
                                "ZDqBVS3Xgx"
                            ],
                            "expression": [
                                "yYfbNaNi8V"
                            ]
                        }
                    ]
                }
            },
            "Bundle_Entry": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "link": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Bundle_Link",
                                    "description": "A series of links that provide context to this entry."
                                }
                            },
                            "fullUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The Absolute URL for the resource.  The fullUrl SHALL NOT disagree with the id in the resource &ndash; i.e. if the fullUrl is not a urn:uuid, the URL shall be version&ndash;independent URL consistent with the Resource.id. The fullUrl is a version independent reference to the resource. The fullUrl element SHALL have a value except that: \n* fullUrl can be empty on a POST (although it does not need to when specifying a temporary id for reference in the bundle)\n* Results from operations might involve resources that are not identified."
                            },
                            "resource": {
                                "$ref": "#/components/schemas/Resource",
                                "description": "The Resource for the entry. The purpose/meaning of the resource is determined by the Bundle.type."
                            },
                            "search": {
                                "$ref": "#/components/schemas/Bundle_Entry_Search",
                                "description": "Information about the search process that lead to the creation of this entry."
                            },
                            "request": {
                                "$ref": "#/components/schemas/Bundle_Entry_Request",
                                "description": "Additional information about how this entry should be processed as part of a transaction or batch.  For history, it shows how the entry was processed to create the version contained in the entry."
                            },
                            "response": {
                                "$ref": "#/components/schemas/Bundle_Entry_Response",
                                "description": "Indicates the results of processing the corresponding 'request' entry in the batch or transaction being responded to or what the results of an operation where when returning history."
                            }
                        }
                    }
                ]
            },
            "Bundle_Entry_Response": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The status code returned by processing this entry. The status SHALL start with a 3 digit HTTP code (e.g. 404) and may contain the standard HTTP description associated with the status code."
                            },
                            "location": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The location header created by processing this operation, populated if the operation returns a location."
                            },
                            "etag": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The Etag for the resource, if the operation for the entry produced a versioned resource (see [Resource Metadata and Versioning](http.html#versioning) and [Managing Resource Contention](http.html#concurrency))."
                            },
                            "lastModified": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The date/time that the resource was modified on the server."
                            },
                            "outcome": {
                                "$ref": "#/components/schemas/Resource",
                                "description": "An OperationOutcome containing hints and warnings produced as part of processing this entry in a batch or transaction."
                            }
                        },
                        "required": [
                            "status"
                        ]
                    }
                ]
            },
            "Bundle_Entry_Request": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "method": {
                                "type": "string",
                                "enum": [
                                    "GET",
                                    "HEAD",
                                    "POST",
                                    "PUT",
                                    "DELETE",
                                    "PATCH"
                                ],
                                "description": "In a transaction or batch, this is the HTTP action to be executed for this entry. In a history bundle, this indicates the HTTP action that occurred."
                            },
                            "url": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The URL for this entry, relative to the root (the address to which the request is posted)."
                            },
                            "ifNoneMatch": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "If the ETag values match, return a 304 Not Modified status. See the API documentation for [\"Conditional Read\"](http.html#cread)."
                            },
                            "ifModifiedSince": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "Only perform the operation if the last updated date matches. See the API documentation for [\"Conditional Read\"](http.html#cread)."
                            },
                            "ifMatch": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Only perform the operation if the Etag value matches. For more information, see the API section [\"Managing Resource Contention\"](http.html#concurrency)."
                            },
                            "ifNoneExist": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Instruct the server not to perform the create if a specified resource already exists. For further information, see the API documentation for [\"Conditional Create\"](http.html#ccreate). This is just the query portion of the URL &ndash; what follows the \"?\" (not including the \"?\")."
                            }
                        },
                        "required": [
                            "method",
                            "url"
                        ]
                    }
                ]
            },
            "Bundle_Entry_Search": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "mode": {
                                "type": "string",
                                "enum": [
                                    "match",
                                    "include",
                                    "outcome"
                                ],
                                "description": "Why this entry is in the result set &ndash; whether it's included as a match or because of an _include requirement, or to convey information or warning information about the search process."
                            },
                            "score": {
                                "type": "number",
                                "description": "When searching, the server's search ranking score for the entry."
                            }
                        }
                    }
                ]
            },
            "Bundle_Link": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "relation": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A name which details the functional use for this link &ndash; see [http://www.iana.org/assignments/link&ndash;relations/link&ndash;relations.xhtml#link&ndash;relations&ndash;1](http://www.iana.org/assignments/link&ndash;relations/link&ndash;relations.xhtml#link&ndash;relations&ndash;1)."
                            },
                            "url": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The reference details for the link."
                            }
                        },
                        "required": [
                            "relation",
                            "url"
                        ]
                    }
                ]
            },
            "OperationOutcome_Issue": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "severity": {
                                "type": "string",
                                "enum": [
                                    "fatal",
                                    "error",
                                    "warning",
                                    "information"
                                ],
                                "description": "Indicates whether the issue indicates a variation from successful processing."
                            },
                            "code": {
                                "type": "string",
                                "enum": [
                                    "invalid",
                                    "structure",
                                    "required",
                                    "value",
                                    "invariant",
                                    "security",
                                    "login",
                                    "unknown",
                                    "expired",
                                    "forbidden",
                                    "suppressed",
                                    "processing",
                                    "not-supported",
                                    "duplicate",
                                    "multiple-matches",
                                    "not-found",
                                    "deleted",
                                    "too-long",
                                    "code-invalid",
                                    "extension",
                                    "too-costly",
                                    "business-rule",
                                    "conflict",
                                    "transient",
                                    "lock-error",
                                    "no-store",
                                    "exception",
                                    "timeout",
                                    "incomplete",
                                    "throttled",
                                    "informational"
                                ],
                                "description": "Describes the type of the issue. The system that creates an OperationOutcome SHALL choose the most applicable code from the IssueType value set, and may additional provide its own code for the error in the details element."
                            },
                            "details": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Additional details about the error. This may be a text description of the error or a system code that identifies the error."
                            },
                            "diagnostics": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Additional diagnostic information about the issue."
                            },
                            "location": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "This element is deprecated because it is XML specific. It is replaced by issue.expression, which is format independent, and simpler to parse. \n\nFor resource issues, this will be a simple XPath limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised.  For HTTP errors, will be \"http.\" + the parameter name."
                                }
                            },
                            "expression": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "A [simple subset of FHIRPath](fhirpath.html#simple) limited to element names, repetition indicators and the default child accessor that identifies one of the elements in the resource that caused this issue to be raised."
                                }
                            }
                        },
                        "required": [
                            "severity",
                            "code"
                        ]
                    }
                ]
            },
            "Task_Output": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The name of the Output parameter."
                            },
                            "valueBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueBoolean": {
                                "type": "boolean",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueDecimal": {
                                "type": "number",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "The value of the Output parameter as a basic type."
                            },
                            "valueMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "The value of the Output parameter as a basic type."
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ]
            },
            "Task_Input": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "A code or description indicating how the input is intended to be used as part of the task execution."
                            },
                            "valueBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueBoolean": {
                                "type": "boolean",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueDecimal": {
                                "type": "number",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "The value of the input parameter as a basic type."
                            },
                            "valueMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "The value of the input parameter as a basic type."
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ]
            },
            "Task_Restriction": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "repetitions": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Indicates the number of times the requested action should occur."
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Over what time&ndash;period is fulfillment sought."
                            },
                            "recipient": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Reference",
                                    "description": "For requests that are targeted to more than on potential recipient/target, for whom is fulfillment sought?"
                                }
                            }
                        }
                    }
                ]
            },
            "Element": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string",
                        "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                        "description": "Unique id for the element within a resource (for internal references). This may be any string value that does not contain spaces."
                    },
                    "extension": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Extension",
                            "description": "May be used to represent additional information that is not part of the basic definition of the element. To make the use of extensions safe and manageable, there is a strict set of governance  applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension."
                        },
                        "example": [
                            {
                                "url": "http://example.com",
                                "valueString": "text value"
                            }
                        ]
                    }
                }
            },
            "BackboneElement": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "modifierExtension": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Extension",
                                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself)."
                                }
                            }
                        }
                    }
                ]
            },
            "Address": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "use": {
                                "type": "string",
                                "enum": [
                                    "home",
                                    "work",
                                    "temp",
                                    "old",
                                    "billing"
                                ],
                                "description": "The purpose of this address."
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "postal",
                                    "physical",
                                    "both"
                                ],
                                "description": "Distinguishes between physical addresses (those you can visit) and mailing addresses (e.g. PO Boxes and care&ndash;of addresses). Most addresses are both."
                            },
                            "text": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Specifies the entire address as it should be displayed e.g. on a postal label. This may be provided instead of or as well as the specific parts."
                            },
                            "line": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "This component contains the house number, apartment number, street name, street direction,  P.O. Box number, delivery hints, and similar address information."
                                }
                            },
                            "city": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The name of the city, town, suburb, village or other community or delivery center."
                            },
                            "district": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The name of the administrative area (county)."
                            },
                            "state": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Sub&ndash;unit of a country with limited sovereignty in a federally organized country. A code may be used if codes are in common use (e.g. US 2 letter state codes)."
                            },
                            "postalCode": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A postal code designating a region defined by the postal service."
                            },
                            "country": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Country &ndash; a nation as commonly understood or generally accepted."
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Time period when address was/is in use."
                            }
                        }
                    }
                ]
            },
            "Age": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    {
                        "type": "object",
                        "properties": {
                        }
                    }
                ]
            },
            "Annotation": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "authorReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The individual responsible for making the annotation."
                            },
                            "authorString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The individual responsible for making the annotation."
                            },
                            "time": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "Indicates when this particular annotation was made."
                            },
                            "text": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The text of the annotation in markdown format."
                            }
                        },
                        "required": [
                            "text"
                        ]
                    }
                ]
            },
            "Attachment": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "contentType": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "Identifies the type of the data in the attachment and allows a method to be chosen to interpret or render the data. Includes mime type parameters such as charset where appropriate."
                            },
                            "language": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The human language of the content. The value can be any valid value according to BCP 47."
                            },
                            "data": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The actual data of the attachment &ndash; a sequence of bytes, base64 encoded."
                            },
                            "url": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "A location where the data can be accessed."
                            },
                            "size": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of bytes of data that make up this attachment (before base64 encoding, if that is done)."
                            },
                            "hash": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The calculated hash of the data using SHA&ndash;1. Represented using base64."
                            },
                            "title": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A label or set of text to display in place of the data."
                            },
                            "creation": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The date that the attachment was first created."
                            }
                        }
                    }
                ]
            },
            "CodeableConcept": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "coding": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Coding",
                                    "description": "A reference to a code defined by a terminology system."
                                }
                            },
                            "text": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user."
                            }
                        }
                    }
                ]
            },
            "Coding": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "system": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The identification of the code system that defines the meaning of the symbol in the code."
                            },
                            "version": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The version of the code system which was used when choosing this code. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."
                            },
                            "code": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post&ndash;coordination)."
                            },
                            "display": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A representation of the meaning of the code in the system, following the rules of the system."
                            },
                            "userSelected": {
                                "type": "boolean",
                                "description": "Indicates that this coding was chosen by a user directly &ndash; e.g. off a pick list of available items (codes or displays)."
                            }
                        }
                    }
                ]
            },
            "ContactPoint": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "system": {
                                "type": "string",
                                "enum": [
                                    "phone",
                                    "fax",
                                    "email",
                                    "pager",
                                    "url",
                                    "sms",
                                    "other"
                                ],
                                "description": "Telecommunications form for contact point &ndash; what communications system is required to make use of the contact."
                            },
                            "value": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The actual contact point details, in a form that is meaningful to the designated communication system (i.e. phone number or email address)."
                            },
                            "use": {
                                "type": "string",
                                "enum": [
                                    "home",
                                    "work",
                                    "temp",
                                    "old",
                                    "mobile"
                                ],
                                "description": "Identifies the purpose for the contact point."
                            },
                            "rank": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a preferred order in which to use a set of contacts. ContactPoints with lower rank values are more preferred than those with higher rank values."
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Time period when the contact point was/is in use."
                            }
                        }
                    }
                ]
            },
            "Count": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    {
                        "type": "object",
                        "properties": {
                        }
                    }
                ]
            },
            "Distance": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    {
                        "type": "object",
                        "properties": {
                        }
                    }
                ]
            },
            "Duration": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    {
                        "type": "object",
                        "properties": {
                        }
                    }
                ]
            },
            "HumanName": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "use": {
                                "type": "string",
                                "enum": [
                                    "usual",
                                    "official",
                                    "temp",
                                    "nickname",
                                    "anonymous",
                                    "old",
                                    "maiden"
                                ],
                                "description": "Identifies the purpose for this name."
                            },
                            "text": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Specifies the entire name as it should be displayed e.g. on an application UI. This may be provided instead of or as well as the specific parts."
                            },
                            "family": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The part of a name that links to the genealogy. In some cultures (e.g. Eritrea) the family name of a son is the first name of his father."
                            },
                            "given": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Given name."
                                }
                            },
                            "prefix": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the start of the name."
                                }
                            },
                            "suffix": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Part of the name that is acquired as a title due to academic, legal, employment or nobility status, etc. and that appears at the end of the name."
                                }
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Indicates the period of time when this name was valid for the named person."
                            }
                        }
                    }
                ]
            },
            "Identifier": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "use": {
                                "type": "string",
                                "enum": [
                                    "usual",
                                    "official",
                                    "temp",
                                    "secondary",
                                    "old"
                                ],
                                "description": "The purpose of this identifier."
                            },
                            "type": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "A coded type for the identifier that can be used to determine which identifier to use for a specific purpose."
                            },
                            "system": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Establishes the namespace for the value &ndash; that is, a URL that describes a set values that are unique."
                            },
                            "value": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The portion of the identifier typically relevant to the user and which is unique within the context of the system."
                            },
                            "period": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Time period during which identifier is/was valid for use."
                            },
                            "assigner": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "Organization that issued/manages the identifier.",
                                "example": {
                                    "reference": "Organization/123",
                                    "type": "Organization",
                                    "display": "The Assigning Organization"
                                }
                            }
                        }
                    }
                ]
            },
            "Money": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "number",
                                "description": "Numerical value (with implicit precision)."
                            },
                            "currency": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "ISO 4217 Currency Code."
                            }
                        }
                    }
                ]
            },
            "MoneyQuantity": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    {
                        "type": "object",
                        "properties": {
                        }
                    }
                ]
            },
            "Period": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "start": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The start of the period. The boundary is inclusive."
                            },
                            "end": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The end of the period. If the end of the period is missing, it means no end was known or planned at the time the instance was created. The start may be in the past, and the end date in the future, which means that period is expected/planned to end at that time."
                            }
                        }
                    }
                ]
            },
            "Quantity": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "value": {
                                "type": "number",
                                "description": "The value of the measured amount. The value includes an implicit precision in the presentation of the value."
                            },
                            "comparator": {
                                "type": "string",
                                "enum": [
                                    "<",
                                    "<=",
                                    ">=",
                                    ">"
                                ],
                                "description": "How the value should be understood and represented &ndash; whether the actual value is greater or less than the stated value due to measurement issues; e.g. if the comparator is \"<\" , then the real value is < stated value."
                            },
                            "unit": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A human&ndash;readable form of the unit."
                            },
                            "system": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The identification of the system that provides the coded form of the unit."
                            },
                            "code": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "A computer processable form of the unit in some unit representation system."
                            }
                        }
                    }
                ]
            },
            "Range": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "low": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "The low limit. The boundary is inclusive."
                            },
                            "high": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "The high limit. The boundary is inclusive."
                            }
                        }
                    }
                ]
            },
            "Ratio": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "numerator": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The value of the numerator."
                            },
                            "denominator": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The value of the denominator."
                            }
                        }
                    }
                ]
            },
            "Reference": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "reference": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A reference to a location at which the other resource is found. The reference may be a relative reference, in which case it is relative to the service base URL, or an absolute URL that resolves to the location where the resource is found. The reference may be version specific or not. If the reference is not to a FHIR RESTful server, then it should be assumed to be version specific. Internal fragment references (start with '#') refer to contained resources."
                            },
                            "type": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The expected type of the target of the reference. If both Reference.type and Reference.reference are populated and Reference.reference is a FHIR URL, both SHALL be consistent.\n\nThe type is the Canonical URL of Resource Definition that is the type this reference refers to. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition/ e.g. \"Patient\" is a reference to http://hl7.org/fhir/StructureDefinition/Patient. Absolute URLs are only allowed for logical models (and can only be used in references in logical models, not resources)."
                            },
                            "identifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "An identifier for the target resource. This is used when there is no way to reference the other resource directly, either because the entity it represents is not available through a FHIR server, or because there is no way for the author of the resource to convert a known identifier to an actual location. There is no requirement that a Reference.identifier point to something that is actually exposed as a FHIR instance, but it SHALL point to a business concept that would be expected to be exposed as a FHIR instance, and that instance would need to be of a FHIR resource type allowed by the reference."
                            },
                            "display": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Plain text narrative that identifies the resource in addition to the resource reference."
                            }
                        }
                    }
                ]
            },
            "SampledData": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "origin": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "The base quantity that a measured value of zero represents. In addition, this provides the units of the entire measurement series."
                            },
                            "period": {
                                "type": "number",
                                "description": "The length of time between sampling times, measured in milliseconds."
                            },
                            "factor": {
                                "type": "number",
                                "description": "A correction factor that is applied to the sampled data points before they are added to the origin."
                            },
                            "lowerLimit": {
                                "type": "number",
                                "description": "The lower limit of detection of the measured points. This is needed if any of the data points have the value \"L\" (lower than detection limit)."
                            },
                            "upperLimit": {
                                "type": "number",
                                "description": "The upper limit of detection of the measured points. This is needed if any of the data points have the value \"U\" (higher than detection limit)."
                            },
                            "dimensions": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of sample points at each time point. If this value is greater than one, then the dimensions will be interlaced &ndash; all the sample points for a point in time will be recorded at once."
                            },
                            "data": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A series of data points which are decimal values separated by a single space (character u20). The special values \"E\" (error), \"L\" (below detection limit) and \"U\" (above detection limit) can also be used in place of a decimal value."
                            }
                        },
                        "required": [
                            "origin",
                            "period",
                            "dimensions"
                        ]
                    }
                ]
            },
            "SimpleQuantity": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Quantity"
                    },
                    {
                        "type": "object",
                        "properties": {
                        }
                    }
                ]
            },
            "Signature": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Coding",
                                    "description": "An indication of the reason that the entity signed this document. This may be explicitly included as part of the signature information and can be used when determining accountability for various actions concerning the document."
                                },
                                "minItems": 1
                            },
                            "when": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "When the digital signature was signed."
                            },
                            "who": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "A reference to an application&ndash;usable description of the identity that signed  (e.g. the signature used their private key)."
                            },
                            "onBehalfOf": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "A reference to an application&ndash;usable description of the identity that is represented by the signature."
                            },
                            "targetFormat": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "A mime type that indicates the technical format of the target resources signed by the signature."
                            },
                            "sigFormat": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "A mime type that indicates the technical format of the signature. Important mime types are application/signature+xml for X ML DigSig, application/jose for JWS, and image/* for a graphical image of a signature, etc."
                            },
                            "data": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The base64 encoding of the Signature content. When signature is not recorded electronically this element would be empty."
                            }
                        },
                        "required": [
                            "type",
                            "when",
                            "who"
                        ]
                    }
                ]
            },
            "Timing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "event": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                    "description": "Identifies specific times when the event occurs."
                                }
                            },
                            "repeat": {
                                "$ref": "#/components/schemas/Timing_Repeat",
                                "description": "A set of rules that describe when the event is scheduled."
                            },
                            "code": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "A code for the timing schedule (or just text in code.text). Some codes such as BID are ubiquitous, but many institutions define their own additional codes. If a code is provided, the code is understood to be a complete statement of whatever is specified in the structured timing data, and either the code or the data may be used to interpret the Timing, with the exception that .repeat.bounds still applies over the code (and is not contained in the code)."
                            }
                        }
                    }
                ]
            },
            "Timing_Repeat": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "boundsDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule."
                            },
                            "boundsRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule."
                            },
                            "boundsPeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Either a duration for the length of the timing schedule, a range of possible length, or outer bounds for start and/or end limits of the timing schedule."
                            },
                            "count": {
                                "type": "integer",
                                "format": "int32",
                                "description": "A total count of the desired number of repetitions across the duration of the entire timing specification. If countMax is present, this element indicates the lower bound of the allowed range of count values."
                            },
                            "countMax": {
                                "type": "integer",
                                "format": "int32",
                                "description": "If present, indicates that the count is a range &ndash; so to perform the action between [count] and [countMax] times."
                            },
                            "duration": {
                                "type": "number",
                                "description": "How long this thing happens for when it happens. If durationMax is present, this element indicates the lower bound of the allowed range of the duration."
                            },
                            "durationMax": {
                                "type": "number",
                                "description": "If present, indicates that the duration is a range &ndash; so to perform the action between [duration] and [durationMax] time length."
                            },
                            "durationUnit": {
                                "type": "string",
                                "enum": [
                                    "s",
                                    "min",
                                    "h",
                                    "d",
                                    "wk",
                                    "mo",
                                    "a"
                                ],
                                "description": "The units of time for the duration, in UCUM units."
                            },
                            "frequency": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of times to repeat the action within the specified period. If frequencyMax is present, this element indicates the lower bound of the allowed range of the frequency."
                            },
                            "frequencyMax": {
                                "type": "integer",
                                "format": "int32",
                                "description": "If present, indicates that the frequency is a range &ndash; so to repeat between [frequency] and [frequencyMax] times within the period or period range."
                            },
                            "period": {
                                "type": "number",
                                "description": "Indicates the duration of time over which repetitions are to occur; e.g. to express \"3 times per day\", 3 would be the frequency and \"1 day\" would be the period. If periodMax is present, this element indicates the lower bound of the allowed range of the period length."
                            },
                            "periodMax": {
                                "type": "number",
                                "description": "If present, indicates that the period is a range from [period] to [periodMax], allowing expressing concepts such as \"do this once every 3&ndash;5 days."
                            },
                            "periodUnit": {
                                "type": "string",
                                "enum": [
                                    "s",
                                    "min",
                                    "h",
                                    "d",
                                    "wk",
                                    "mo",
                                    "a"
                                ],
                                "description": "The units of time for the period in UCUM units."
                            },
                            "dayOfWeek": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "mon",
                                        "tue",
                                        "wed",
                                        "thu",
                                        "fri",
                                        "sat",
                                        "sun"
                                    ],
                                    "description": "If one or more days of week is provided, then the action happens only on the specified day(s)."
                                }
                            },
                            "timeOfDay": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                    "description": "Specified time of day for action to take place."
                                }
                            },
                            "when": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "MORN",
                                        "MORN.early",
                                        "MORN.late",
                                        "NOON",
                                        "AFT",
                                        "AFT.early",
                                        "AFT.late",
                                        "EVE",
                                        "EVE.early",
                                        "EVE.late",
                                        "NIGHT",
                                        "PHS",
                                        "HS",
                                        "WAKE",
                                        "C",
                                        "CM",
                                        "CD",
                                        "CV",
                                        "AC",
                                        "ACM",
                                        "ACD",
                                        "ACV",
                                        "PC",
                                        "PCM",
                                        "PCD",
                                        "PCV"
                                    ],
                                    "description": "An approximate time period during the day, potentially linked to an event of daily living that indicates when the action should occur."
                                }
                            },
                            "offset": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The number of minutes from the event. If the event code does not indicate whether the minutes is before or after the event, then the offset is assumed to be after the event."
                            }
                        }
                    }
                ]
            },
            "ContactDetail": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The name of an individual to contact."
                            },
                            "telecom": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ContactPoint",
                                    "description": "The contact details for the individual (if a name was provided) or the organization."
                                }
                            }
                        }
                    }
                ]
            },
            "Contributor": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "author",
                                    "editor",
                                    "reviewer",
                                    "endorser"
                                ],
                                "description": "The type of contributor."
                            },
                            "name": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The name of the individual or organization responsible for the contribution."
                            },
                            "contact": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ContactDetail",
                                    "description": "Contact details to assist a user in finding and communicating with the contributor."
                                }
                            }
                        },
                        "required": [
                            "type",
                            "name"
                        ]
                    }
                ]
            },
            "DataRequirement": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Address",
                                    "Age",
                                    "Annotation",
                                    "Attachment",
                                    "BackboneElement",
                                    "CodeableConcept",
                                    "Coding",
                                    "ContactDetail",
                                    "ContactPoint",
                                    "Contributor",
                                    "Count",
                                    "DataRequirement",
                                    "Distance",
                                    "Dosage",
                                    "Duration",
                                    "Element",
                                    "ElementDefinition",
                                    "Expression",
                                    "Extension",
                                    "HumanName",
                                    "Identifier",
                                    "MarketingStatus",
                                    "Meta",
                                    "Money",
                                    "MoneyQuantity",
                                    "Narrative",
                                    "ParameterDefinition",
                                    "Period",
                                    "Population",
                                    "ProdCharacteristic",
                                    "ProductShelfLife",
                                    "Quantity",
                                    "Range",
                                    "Ratio",
                                    "Reference",
                                    "RelatedArtifact",
                                    "SampledData",
                                    "Signature",
                                    "SimpleQuantity",
                                    "SubstanceAmount",
                                    "Timing",
                                    "TriggerDefinition",
                                    "UsageContext",
                                    "base64Binary",
                                    "boolean",
                                    "canonical",
                                    "code",
                                    "date",
                                    "dateTime",
                                    "decimal",
                                    "id",
                                    "instant",
                                    "integer",
                                    "markdown",
                                    "oid",
                                    "positiveInt",
                                    "string",
                                    "time",
                                    "unsignedInt",
                                    "uri",
                                    "url",
                                    "uuid",
                                    "xhtml",
                                    "Account",
                                    "ActivityDefinition",
                                    "AdverseEvent",
                                    "AllergyIntolerance",
                                    "Appointment",
                                    "AppointmentResponse",
                                    "AuditEvent",
                                    "Basic",
                                    "Binary",
                                    "BiologicallyDerivedProduct",
                                    "BodyStructure",
                                    "Bundle",
                                    "CapabilityStatement",
                                    "CarePlan",
                                    "CareTeam",
                                    "CatalogEntry",
                                    "ChargeItem",
                                    "ChargeItemDefinition",
                                    "Claim",
                                    "ClaimResponse",
                                    "ClinicalImpression",
                                    "CodeSystem",
                                    "Communication",
                                    "CommunicationRequest",
                                    "CompartmentDefinition",
                                    "Composition",
                                    "ConceptMap",
                                    "Condition",
                                    "Consent",
                                    "Contract",
                                    "Coverage",
                                    "CoverageEligibilityRequest",
                                    "CoverageEligibilityResponse",
                                    "DetectedIssue",
                                    "Device",
                                    "DeviceDefinition",
                                    "DeviceMetric",
                                    "DeviceRequest",
                                    "DeviceUseStatement",
                                    "DiagnosticReport",
                                    "DocumentManifest",
                                    "DocumentReference",
                                    "DomainResource",
                                    "EffectEvidenceSynthesis",
                                    "Encounter",
                                    "Endpoint",
                                    "EnrollmentRequest",
                                    "EnrollmentResponse",
                                    "EpisodeOfCare",
                                    "EventDefinition",
                                    "Evidence",
                                    "EvidenceVariable",
                                    "ExampleScenario",
                                    "ExplanationOfBenefit",
                                    "FamilyMemberHistory",
                                    "Flag",
                                    "Goal",
                                    "GraphDefinition",
                                    "Group",
                                    "GuidanceResponse",
                                    "HealthcareService",
                                    "ImagingStudy",
                                    "Immunization",
                                    "ImmunizationEvaluation",
                                    "ImmunizationRecommendation",
                                    "ImplementationGuide",
                                    "InsurancePlan",
                                    "Invoice",
                                    "Library",
                                    "Linkage",
                                    "List",
                                    "Location",
                                    "Measure",
                                    "MeasureReport",
                                    "Media",
                                    "Medication",
                                    "MedicationAdministration",
                                    "MedicationDispense",
                                    "MedicationKnowledge",
                                    "MedicationRequest",
                                    "MedicationStatement",
                                    "MedicinalProduct",
                                    "MedicinalProductAuthorization",
                                    "MedicinalProductContraindication",
                                    "MedicinalProductIndication",
                                    "MedicinalProductIngredient",
                                    "MedicinalProductInteraction",
                                    "MedicinalProductManufactured",
                                    "MedicinalProductPackaged",
                                    "MedicinalProductPharmaceutical",
                                    "MedicinalProductUndesirableEffect",
                                    "MessageDefinition",
                                    "MessageHeader",
                                    "MolecularSequence",
                                    "NamingSystem",
                                    "NutritionOrder",
                                    "Observation",
                                    "ObservationDefinition",
                                    "OperationDefinition",
                                    "OperationOutcome",
                                    "Organization",
                                    "OrganizationAffiliation",
                                    "Parameters",
                                    "Patient",
                                    "PaymentNotice",
                                    "PaymentReconciliation",
                                    "Person",
                                    "PlanDefinition",
                                    "Practitioner",
                                    "PractitionerRole",
                                    "Procedure",
                                    "Provenance",
                                    "Questionnaire",
                                    "QuestionnaireResponse",
                                    "RelatedPerson",
                                    "RequestGroup",
                                    "ResearchDefinition",
                                    "ResearchElementDefinition",
                                    "ResearchStudy",
                                    "ResearchSubject",
                                    "Resource",
                                    "RiskAssessment",
                                    "RiskEvidenceSynthesis",
                                    "Schedule",
                                    "SearchParameter",
                                    "ServiceRequest",
                                    "Slot",
                                    "Specimen",
                                    "SpecimenDefinition",
                                    "StructureDefinition",
                                    "StructureMap",
                                    "Subscription",
                                    "Substance",
                                    "SubstanceNucleicAcid",
                                    "SubstancePolymer",
                                    "SubstanceProtein",
                                    "SubstanceReferenceInformation",
                                    "SubstanceSourceMaterial",
                                    "SubstanceSpecification",
                                    "SupplyDelivery",
                                    "SupplyRequest",
                                    "Task",
                                    "TerminologyCapabilities",
                                    "TestReport",
                                    "TestScript",
                                    "ValueSet",
                                    "VerificationResult",
                                    "VisionPrescription",
                                    "Type",
                                    "Any"
                                ],
                                "description": "The type of the required data, specified as the type name of a resource. For profiles, this value is set to the type of the base resource of the profile."
                            },
                            "profile": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "\\S*",
                                    "description": "The profile of the required data, specified as the uri of the profile definition."
                                }
                            },
                            "subjectCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed."
                            },
                            "subjectReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The intended subjects of the data requirement. If this element is not provided, a Patient subject is assumed."
                            },
                            "mustSupport": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Indicates that specific elements of the type are referenced by the knowledge module and must be supported by the consumer in order to obtain an effective evaluation. This does not mean that a value is required for this element, only that the consuming system must understand the element and be able to provide values for it if they are available. \n\nThe value of mustSupport SHALL be a FHIRPath resolveable on the type of the DataRequirement. The path SHALL consist only of identifiers, constant indexers, and .resolve() (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details)."
                                }
                            },
                            "codeFilter": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DataRequirement_CodeFilter",
                                    "description": "Code filters specify additional constraints on the data, specifying the value set of interest for a particular element of the data. Each code filter defines an additional constraint on the data, i.e. code filters are AND'ed, not OR'ed."
                                }
                            },
                            "dateFilter": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DataRequirement_DateFilter",
                                    "description": "Date filters specify additional constraints on the data in terms of the applicable date range for specific elements. Each date filter specifies an additional constraint on the data, i.e. date filters are AND'ed, not OR'ed."
                                }
                            },
                            "limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a maximum number of results that are required (uses the _count search parameter)."
                            },
                            "sort": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DataRequirement_Sort",
                                    "description": "Specifies the order of the results to be returned."
                                }
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ]
            },
            "DataRequirement_Sort": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The attribute of the sort. The specified path must be resolvable from the type of the required data. The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements. Note that the index must be an integer constant."
                            },
                            "direction": {
                                "type": "string",
                                "enum": [
                                    "ascending",
                                    "descending"
                                ],
                                "description": "The direction of the sort, ascending or descending."
                            }
                        },
                        "required": [
                            "path",
                            "direction"
                        ]
                    }
                ]
            },
            "DataRequirement_DateFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The date&ndash;valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type date, dateTime, Period, Schedule, or Timing."
                            },
                            "searchParam": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A date parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type date, dateTime, Period, Schedule, or Timing."
                            },
                            "valueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now."
                            },
                            "valuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now."
                            },
                            "valueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "The value of the filter. If period is specified, the filter will return only those data items that fall within the bounds determined by the Period, inclusive of the period boundaries. If dateTime is specified, the filter will return only those data items that are equal to the specified dateTime. If a Duration is specified, the filter will return only those data items that fall within Duration before now."
                            }
                        }
                    }
                ]
            },
            "DataRequirement_CodeFilter": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The code&ndash;valued attribute of the filter. The specified path SHALL be a FHIRPath resolveable on the specified type of the DataRequirement, and SHALL consist only of identifiers, constant indexers, and .resolve(). The path is allowed to contain qualifiers (.) to traverse sub&ndash;elements, as well as indexers ([x]) to traverse multiple&ndash;cardinality sub&ndash;elements (see the [Simple FHIRPath Profile](fhirpath.html#simple) for full details). Note that the index must be an integer constant. The path must resolve to an element of type code, Coding, or CodeableConcept."
                            },
                            "searchParam": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A token parameter that refers to a search parameter defined on the specified type of the DataRequirement, and which searches on elements of type code, Coding, or CodeableConcept."
                            },
                            "valueSet": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The valueset for the code filter. The valueSet and code elements are additive. If valueSet is specified, the filter will return only those data items for which the value of the code&ndash;valued element specified in the path is a member of the specified valueset."
                            },
                            "code": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Coding",
                                    "description": "The codes for the code filter. If values are given, the filter will return only those data items for which the code&ndash;valued attribute specified by the path has a value that is one of the specified codes. If codes are specified in addition to a value set, the filter returns items matching a code in the value set or one of the specified codes."
                                }
                            }
                        }
                    }
                ]
            },
            "Expression": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "description": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A brief, natural language description of the condition that effectively communicates the intended semantics."
                            },
                            "name": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "A short name assigned to the expression to allow for multiple reuse of the expression in the context where it is defined."
                            },
                            "language": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The media type of the language for the expression."
                            },
                            "expression": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "An expression in the specified language that returns a value."
                            },
                            "reference": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "A URI that defines where the expression is found."
                            }
                        },
                        "required": [
                            "language"
                        ]
                    }
                ]
            },
            "ParameterDefinition": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The name of the parameter used to allow access to the value of the parameter in evaluation contexts."
                            },
                            "use": {
                                "type": "string",
                                "enum": [
                                    "in",
                                    "out"
                                ],
                                "description": "Whether the parameter is input or output for the module."
                            },
                            "min": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The minimum number of times this parameter SHALL appear in the request or response."
                            },
                            "max": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The maximum number of times this element is permitted to appear in the request or response."
                            },
                            "documentation": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A brief discussion of what the parameter is for and how it is used by the module."
                            },
                            "type": {
                                "type": "string",
                                "enum": [
                                    "Address",
                                    "Age",
                                    "Annotation",
                                    "Attachment",
                                    "BackboneElement",
                                    "CodeableConcept",
                                    "Coding",
                                    "ContactDetail",
                                    "ContactPoint",
                                    "Contributor",
                                    "Count",
                                    "DataRequirement",
                                    "Distance",
                                    "Dosage",
                                    "Duration",
                                    "Element",
                                    "ElementDefinition",
                                    "Expression",
                                    "Extension",
                                    "HumanName",
                                    "Identifier",
                                    "MarketingStatus",
                                    "Meta",
                                    "Money",
                                    "MoneyQuantity",
                                    "Narrative",
                                    "ParameterDefinition",
                                    "Period",
                                    "Population",
                                    "ProdCharacteristic",
                                    "ProductShelfLife",
                                    "Quantity",
                                    "Range",
                                    "Ratio",
                                    "Reference",
                                    "RelatedArtifact",
                                    "SampledData",
                                    "Signature",
                                    "SimpleQuantity",
                                    "SubstanceAmount",
                                    "Timing",
                                    "TriggerDefinition",
                                    "UsageContext",
                                    "base64Binary",
                                    "boolean",
                                    "canonical",
                                    "code",
                                    "date",
                                    "dateTime",
                                    "decimal",
                                    "id",
                                    "instant",
                                    "integer",
                                    "markdown",
                                    "oid",
                                    "positiveInt",
                                    "string",
                                    "time",
                                    "unsignedInt",
                                    "uri",
                                    "url",
                                    "uuid",
                                    "xhtml",
                                    "Account",
                                    "ActivityDefinition",
                                    "AdverseEvent",
                                    "AllergyIntolerance",
                                    "Appointment",
                                    "AppointmentResponse",
                                    "AuditEvent",
                                    "Basic",
                                    "Binary",
                                    "BiologicallyDerivedProduct",
                                    "BodyStructure",
                                    "Bundle",
                                    "CapabilityStatement",
                                    "CarePlan",
                                    "CareTeam",
                                    "CatalogEntry",
                                    "ChargeItem",
                                    "ChargeItemDefinition",
                                    "Claim",
                                    "ClaimResponse",
                                    "ClinicalImpression",
                                    "CodeSystem",
                                    "Communication",
                                    "CommunicationRequest",
                                    "CompartmentDefinition",
                                    "Composition",
                                    "ConceptMap",
                                    "Condition",
                                    "Consent",
                                    "Contract",
                                    "Coverage",
                                    "CoverageEligibilityRequest",
                                    "CoverageEligibilityResponse",
                                    "DetectedIssue",
                                    "Device",
                                    "DeviceDefinition",
                                    "DeviceMetric",
                                    "DeviceRequest",
                                    "DeviceUseStatement",
                                    "DiagnosticReport",
                                    "DocumentManifest",
                                    "DocumentReference",
                                    "DomainResource",
                                    "EffectEvidenceSynthesis",
                                    "Encounter",
                                    "Endpoint",
                                    "EnrollmentRequest",
                                    "EnrollmentResponse",
                                    "EpisodeOfCare",
                                    "EventDefinition",
                                    "Evidence",
                                    "EvidenceVariable",
                                    "ExampleScenario",
                                    "ExplanationOfBenefit",
                                    "FamilyMemberHistory",
                                    "Flag",
                                    "Goal",
                                    "GraphDefinition",
                                    "Group",
                                    "GuidanceResponse",
                                    "HealthcareService",
                                    "ImagingStudy",
                                    "Immunization",
                                    "ImmunizationEvaluation",
                                    "ImmunizationRecommendation",
                                    "ImplementationGuide",
                                    "InsurancePlan",
                                    "Invoice",
                                    "Library",
                                    "Linkage",
                                    "List",
                                    "Location",
                                    "Measure",
                                    "MeasureReport",
                                    "Media",
                                    "Medication",
                                    "MedicationAdministration",
                                    "MedicationDispense",
                                    "MedicationKnowledge",
                                    "MedicationRequest",
                                    "MedicationStatement",
                                    "MedicinalProduct",
                                    "MedicinalProductAuthorization",
                                    "MedicinalProductContraindication",
                                    "MedicinalProductIndication",
                                    "MedicinalProductIngredient",
                                    "MedicinalProductInteraction",
                                    "MedicinalProductManufactured",
                                    "MedicinalProductPackaged",
                                    "MedicinalProductPharmaceutical",
                                    "MedicinalProductUndesirableEffect",
                                    "MessageDefinition",
                                    "MessageHeader",
                                    "MolecularSequence",
                                    "NamingSystem",
                                    "NutritionOrder",
                                    "Observation",
                                    "ObservationDefinition",
                                    "OperationDefinition",
                                    "OperationOutcome",
                                    "Organization",
                                    "OrganizationAffiliation",
                                    "Parameters",
                                    "Patient",
                                    "PaymentNotice",
                                    "PaymentReconciliation",
                                    "Person",
                                    "PlanDefinition",
                                    "Practitioner",
                                    "PractitionerRole",
                                    "Procedure",
                                    "Provenance",
                                    "Questionnaire",
                                    "QuestionnaireResponse",
                                    "RelatedPerson",
                                    "RequestGroup",
                                    "ResearchDefinition",
                                    "ResearchElementDefinition",
                                    "ResearchStudy",
                                    "ResearchSubject",
                                    "Resource",
                                    "RiskAssessment",
                                    "RiskEvidenceSynthesis",
                                    "Schedule",
                                    "SearchParameter",
                                    "ServiceRequest",
                                    "Slot",
                                    "Specimen",
                                    "SpecimenDefinition",
                                    "StructureDefinition",
                                    "StructureMap",
                                    "Subscription",
                                    "Substance",
                                    "SubstanceNucleicAcid",
                                    "SubstancePolymer",
                                    "SubstanceProtein",
                                    "SubstanceReferenceInformation",
                                    "SubstanceSourceMaterial",
                                    "SubstanceSpecification",
                                    "SupplyDelivery",
                                    "SupplyRequest",
                                    "Task",
                                    "TerminologyCapabilities",
                                    "TestReport",
                                    "TestScript",
                                    "ValueSet",
                                    "VerificationResult",
                                    "VisionPrescription",
                                    "Type",
                                    "Any"
                                ],
                                "description": "The type of the parameter."
                            },
                            "profile": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "If specified, this indicates a profile that the input data must conform to, or that the output data will conform to."
                            }
                        },
                        "required": [
                            "use",
                            "type"
                        ]
                    }
                ]
            },
            "RelatedArtifact": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "documentation",
                                    "justification",
                                    "citation",
                                    "predecessor",
                                    "successor",
                                    "derived-from",
                                    "depends-on",
                                    "composed-of"
                                ],
                                "description": "The type of relationship to the related artifact."
                            },
                            "label": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A short label that can be used to reference the citation from elsewhere in the containing artifact, such as a footnote index."
                            },
                            "display": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A brief description of the document or knowledge resource being referenced, suitable for display to a consumer."
                            },
                            "citation": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A bibliographic citation for the related artifact. This text SHOULD be formatted according to an accepted citation format."
                            },
                            "url": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "A url for the artifact that can be followed to access the actual content."
                            },
                            "document": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "The document being referenced, represented as an attachment. This is exclusive with the resource element."
                            },
                            "resource": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The related resource, such as a library, value set, profile, or other knowledge resource."
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ]
            },
            "TriggerDefinition": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "named-event",
                                    "periodic",
                                    "data-changed",
                                    "data-added",
                                    "data-modified",
                                    "data-removed",
                                    "data-accessed",
                                    "data-access-ended"
                                ],
                                "description": "The type of triggering event."
                            },
                            "name": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A formal name for the event. This may be an absolute URI that identifies the event formally (e.g. from a trigger registry), or a simple relative URI that identifies the event in a local context."
                            },
                            "timingTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "The timing of the event (if this is a periodic trigger)."
                            },
                            "timingReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The timing of the event (if this is a periodic trigger)."
                            },
                            "timingDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The timing of the event (if this is a periodic trigger)."
                            },
                            "timingDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The timing of the event (if this is a periodic trigger)."
                            },
                            "data": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/DataRequirement",
                                    "description": "The triggering data of the event (if this is a data trigger). If more than one data is requirement is specified, then all the data requirements must be true."
                                }
                            },
                            "condition": {
                                "$ref": "#/components/schemas/Expression",
                                "description": "A boolean&ndash;valued expression that is evaluated in the context of the container of the trigger definition and returns whether or not the trigger fires."
                            }
                        },
                        "required": [
                            "type"
                        ]
                    }
                ]
            },
            "UsageContext": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "code": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "A code that identifies the type of context being specified by this usage context."
                            },
                            "valueCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code."
                            },
                            "valueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code."
                            },
                            "valueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code."
                            },
                            "valueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "A value that defines the context specified in this context of use. The interpretation of the value is defined by the code."
                            }
                        },
                        "required": [
                            "code"
                        ]
                    }
                ]
            },
            "Dosage": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "sequence": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Indicates the order in which the dosage instructions should be applied or interpreted."
                            },
                            "text": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Free text dosage instructions e.g. SIG."
                            },
                            "additionalInstruction": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CodeableConcept",
                                    "description": "Supplemental instructions to the patient on how to take the medication  (e.g. \"with meals\" or\"take half to one hour before food\") or warnings for the patient about the medication (e.g. \"may cause drowsiness\" or \"avoid exposure of skin to direct sunlight or sunlamps\")."
                                }
                            },
                            "patientInstruction": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Instructions in terms that are understood by the patient or consumer."
                            },
                            "timing": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "When medication should be administered."
                            },
                            "asNeededBoolean": {
                                "type": "boolean",
                                "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept)."
                            },
                            "asNeededCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Indicates whether the Medication is only taken when needed within a specific dosing schedule (Boolean option), or it indicates the precondition for taking the Medication (CodeableConcept)."
                            },
                            "site": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Body site to administer to."
                            },
                            "route": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "How drug should enter body."
                            },
                            "method": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Technique for administering medication."
                            },
                            "doseAndRate": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Dosage_DoseAndRate",
                                    "description": "The amount of medication administered."
                                }
                            },
                            "maxDosePerPeriod": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "Upper limit on medication per unit of time."
                            },
                            "maxDosePerAdministration": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "Upper limit on medication per administration."
                            },
                            "maxDosePerLifetime": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "Upper limit on medication per lifetime of the patient."
                            }
                        }
                    }
                ]
            },
            "Dosage_DoseAndRate": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The kind of dose or rate specified, for example, ordered or calculated."
                            },
                            "doseRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Amount of medication per dose."
                            },
                            "doseQuantity": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "Amount of medication per dose."
                            },
                            "rateRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "Amount of medication per unit of time."
                            },
                            "rateRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Amount of medication per unit of time."
                            },
                            "rateQuantity": {
                                "$ref": "#/components/schemas/SimpleQuantity",
                                "description": "Amount of medication per unit of time."
                            }
                        }
                    }
                ]
            },
            "Meta": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "versionId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "The version specific identifier, as it appears in the version portion of the URL. This value changes when the resource is created, updated, or deleted."
                            },
                            "lastUpdated": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "When the resource last changed &ndash; e.g. when the version changed."
                            },
                            "source": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "A uri that identifies the source system of the resource. This provides a minimal amount of [Provenance](provenance.html#) information that can be used to track or differentiate the source of information in the resource. The source may identify another FHIR server, document, message, database, etc."
                            },
                            "profile": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "\\S*",
                                    "description": "A list of profiles (references to [StructureDefinition](structuredefinition.html#) resources) that this resource claims to conform to. The URL is a reference to [StructureDefinition.url](structuredefinition&ndash;definitions.html#StructureDefinition.url)."
                                }
                            },
                            "security": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Coding",
                                    "description": "Security labels applied to this resource. These tags connect specific resources to the overall security policy and infrastructure."
                                }
                            },
                            "tag": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Coding",
                                    "description": "Tags applied to this resource. Tags are intended to be used to identify and relate resources to process and workflow, and applications are not required to consider the tags when interpreting the meaning of a resource."
                                }
                            }
                        }
                    }
                ]
            },
            "Narrative": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "status": {
                                "type": "string",
                                "enum": [
                                    "generated",
                                    "extensions",
                                    "additional",
                                    "empty"
                                ],
                                "description": "The status of the narrative &ndash; whether it's entirely generated (from just the defined data or the extensions too), or whether a human authored it and it may contain additional data."
                            },
                            "div": {
                                "type": "string",
                                "description": "The actual narrative content, a stripped down version of XHTML."
                            }
                        },
                        "required": [
                            "status",
                            "div"
                        ]
                    }
                ]
            },
            "Extension": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Element"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "url": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Source of the definition for the extension code &ndash; a logical name or a URL."
                            },
                            "valueBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueBoolean": {
                                "type": "boolean",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueDecimal": {
                                "type": "number",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            },
                            "valueMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "Value of extension &ndash; must be one of a constrained set of the data types (see [Extensibility](extensibility.html) for a list)."
                            }
                        },
                        "required": [
                            "url"
                        ]
                    }
                ]
            },
            "ElementDefinition": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The path identifies the element and is expressed as a \".\"&ndash;separated list of ancestor elements, beginning with the name of the resource or extension."
                            },
                            "representation": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "xmlAttr",
                                        "xmlText",
                                        "typeAttr",
                                        "cdaText",
                                        "xhtml"
                                    ],
                                    "description": "Codes that define how this element is represented in instances, when the deviation varies from the normal case."
                                }
                            },
                            "sliceName": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The name of this element definition slice, when slicing is working. The name must be a token with no dots or spaces. This is a unique name referring to a specific set of constraints applied to this element, used to provide a name to different slices of the same element."
                            },
                            "sliceIsConstraining": {
                                "type": "boolean",
                                "description": "If true, indicates that this slice definition is constraining a slice definition with the same name in an inherited profile. If false, the slice is not overriding any slice in an inherited profile. If missing, the slice might or might not be overriding a slice in an inherited profile, depending on the sliceName."
                            },
                            "label": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A single preferred label which is the text to display beside the element indicating its meaning or to use to prompt for the element in a user display or form."
                            },
                            "code": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Coding",
                                    "description": "A code that has the same meaning as the element in a particular terminology."
                                }
                            },
                            "slicing": {
                                "$ref": "#/components/schemas/ElementDefinition_Slicing",
                                "description": "Indicates that the element is sliced into a set of alternative definitions (i.e. in a structure definition, there are multiple different constraints on a single element in the base resource). Slicing can be used in any resource that has cardinality ..* on the base resource, or any resource with a choice of types. The set of slices is any elements that come after this in the element sequence that have the same path, until a shorter path occurs (the shorter path terminates the set)."
                            },
                            "short": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A concise description of what this element means (e.g. for use in autogenerated summaries)."
                            },
                            "definition": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Provides a complete explanation of the meaning of the data element for human readability.  For the case of elements derived from existing elements (e.g. constraints), the definition SHALL be consistent with the base definition, but convey the meaning of the element in the particular context of use of the resource. (Note: The text you are reading is specified in ElementDefinition.definition)."
                            },
                            "comment": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Explanatory notes and implementation guidance about the data element, including notes about how to use the data properly, exceptions to proper use, etc. (Note: The text you are reading is specified in ElementDefinition.comment)."
                            },
                            "requirements": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "This element is for traceability of why the element was created and why the constraints exist as they do. This may be used to point to source materials or specifications that drove the structure of this element."
                            },
                            "alias": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Identifies additional names by which this element might also be known."
                                }
                            },
                            "min": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The minimum number of times this element SHALL appear in the instance."
                            },
                            "max": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The maximum number of times this element is permitted to appear in the instance."
                            },
                            "base": {
                                "$ref": "#/components/schemas/ElementDefinition_Base",
                                "description": "Information about the base definition of the element, provided to make it unnecessary for tools to trace the deviation of the element through the derived and related profiles. When the element definition is not the original definition of an element &ndash; i.g. either in a constraint on another type, or for elements from a super type in a snap shot &ndash; then the information in provided in the element definition may be different to the base definition. On the original definition of the element, it will be same."
                            },
                            "contentReference": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Identifies an element defined elsewhere in the definition whose content rules should be applied to the current element. ContentReferences bring across all the rules that are in the ElementDefinition for the element, including definitions, cardinality constraints, bindings, invariants etc."
                            },
                            "type": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ElementDefinition_Type",
                                    "description": "How the element value is interpreted when discrimination is evaluated."
                                },
                                "minItems": 1
                            },
                            "defaultValueBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueBoolean": {
                                "type": "boolean",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueDecimal": {
                                "type": "number",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "defaultValueMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "The value that should be used if there is no value stated in the instance (e.g. 'if not otherwise specified, the abstract is false')."
                            },
                            "meaningWhenMissing": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The Implicit meaning that is to be understood when this element is missing (e.g. 'when this element is missing, the period is ongoing')."
                            },
                            "orderMeaning": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "If present, indicates that the order of the repeating element has meaning and describes what that meaning is.  If absent, it means that the order of the element has no meaning."
                            },
                            "fixedBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedBoolean": {
                                "type": "boolean",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedDecimal": {
                                "type": "number",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedPositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedPeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "fixedMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "Specifies a value that SHALL be exactly the value  for this element in the instance. For purposes of comparison, non&ndash;significant whitespace is ignored, and all values must be an exact match (case and accent sensitive). Missing elements/attributes must also be missing."
                            },
                            "patternBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternBoolean": {
                                "type": "boolean",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternDecimal": {
                                "type": "number",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternPositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternPeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "patternMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "Specifies a value that the value in the instance SHALL follow &ndash; that is, any value in the pattern must be found in the instance. Other additional values may be found too. This is effectively constraint by example.  \n\nWhen pattern[x] is used to constrain a primitive, it means that the value provided in the pattern[x] must match the instance value exactly.\n\nWhen pattern[x] is used to constrain an array, it means that each element provided in the pattern[x] array must (recursively) match at least one element from the instance array.\n\nWhen pattern[x] is used to constrain a complex object, it means that each property in the pattern must be present in the complex object, and its value must recursively match &ndash;&ndash; i.e.,\n\n1. If primitive: it must match exactly the pattern value\n2. If a complex object: it must match (recursively) the pattern value\n3. If an array: it must match (recursively) the pattern value."
                            },
                            "example": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ElementDefinition_Example",
                                    "description": "A sample value for this element demonstrating the type of information that would typically be found in the element."
                                }
                            },
                            "minValueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueDecimal": {
                                "type": "number",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "minValueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The minimum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueDecimal": {
                                "type": "number",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxValueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The maximum allowed value for the element. The value is inclusive. This is allowed for the types date, dateTime, instant, time, decimal, integer, and Quantity."
                            },
                            "maxLength": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Indicates the maximum length in characters that is permitted to be present in conformant instances and which is expected to be supported by conformant consumers that support the element."
                            },
                            "condition": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                    "description": "A reference to an invariant that may make additional statements about the cardinality or value in the instance."
                                }
                            },
                            "constraint": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ElementDefinition_Constraint",
                                    "description": "Formal constraints such as co&ndash;occurrence and other constraints that can be computationally evaluated within the context of the instance."
                                }
                            },
                            "mustSupport": {
                                "type": "boolean",
                                "description": "If true, implementations that produce or consume resources SHALL provide \"support\" for the element in some meaningful way.  If false, the element may be ignored and not supported. If false, whether to populate or use the data element in any way is at the discretion of the implementation."
                            },
                            "isModifier": {
                                "type": "boolean",
                                "description": "If true, the value of this element affects the interpretation of the element or resource that contains it, and the value of the element cannot be ignored. Typically, this is used for status, negation and qualification codes. The effect of this is that the element cannot be ignored by systems: they SHALL either recognize the element and process it, and/or a pre&ndash;determination has been made that it is not relevant to their particular system."
                            },
                            "isModifierReason": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Explains how that element affects the interpretation of the resource or element that contains it."
                            },
                            "isSummary": {
                                "type": "boolean",
                                "description": "Whether the element should be included if a client requests a search with the parameter _summary=true."
                            },
                            "binding": {
                                "$ref": "#/components/schemas/ElementDefinition_Binding",
                                "description": "Binds to a value set if this element is coded (code, Coding, CodeableConcept, Quantity), or the data types (string, uri)."
                            },
                            "mapping": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ElementDefinition_Mapping",
                                    "description": "Identifies a concept from an external specification that roughly corresponds to this element."
                                }
                            }
                        },
                        "required": [
                            "path"
                        ]
                    }
                ]
            },
            "ElementDefinition_Mapping": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "identity": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "An internal reference to the definition of a mapping."
                            },
                            "language": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "Identifies the computable language in which mapping.map is expressed."
                            },
                            "map": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Expresses what part of the target specification corresponds to this element."
                            },
                            "comment": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Comments that provide information about the mapping or its use."
                            }
                        },
                        "required": [
                            "identity",
                            "map"
                        ]
                    }
                ]
            },
            "ElementDefinition_Binding": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "strength": {
                                "type": "string",
                                "enum": [
                                    "required",
                                    "extensible",
                                    "preferred",
                                    "example"
                                ],
                                "description": "Indicates the degree of conformance expectations associated with this binding &ndash; that is, the degree to which the provided value set must be adhered to in the instances."
                            },
                            "description": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Describes the intended use of this particular set of codes."
                            },
                            "valueSet": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "Refers to the value set that identifies the set of codes the binding refers to."
                            }
                        },
                        "required": [
                            "strength"
                        ]
                    }
                ]
            },
            "ElementDefinition_Constraint": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "key": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "Allows identification of which elements have their cardinalities impacted by the constraint.  Will not be referenced for constraints that do not affect cardinality."
                            },
                            "requirements": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Description of why this constraint is necessary or appropriate."
                            },
                            "severity": {
                                "type": "string",
                                "enum": [
                                    "error",
                                    "warning"
                                ],
                                "description": "Identifies the impact constraint violation has on the conformance of the instance."
                            },
                            "human": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Text that can be used to describe the constraint in messages identifying that the constraint has been violated."
                            },
                            "expression": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A [FHIRPath](fhirpath.html) expression of constraint that can be executed to see if this constraint is met."
                            },
                            "xpath": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "An XPath expression of constraint that can be executed to see if this constraint is met."
                            },
                            "source": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "A reference to the original source of the constraint, for traceability purposes."
                            }
                        },
                        "required": [
                            "key",
                            "severity",
                            "human"
                        ]
                    }
                ]
            },
            "ElementDefinition_Example": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Describes the purpose of this example amoung the set of examples."
                            },
                            "valueBase64Binary": {
                                "type": "string",
                                "pattern": "(\\s*([0-9a-zA-Z\\+/=]){4}\\s*)+",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueBoolean": {
                                "type": "boolean",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueCanonical": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueCode": {
                                "type": "string",
                                "pattern": "[^\\s]+(\\s[^\\s]+)*",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1]))?)?",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueDateTime": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueDecimal": {
                                "type": "number",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueId": {
                                "type": "string",
                                "pattern": "[A-Za-z0-9\\-\\.]{1,64}",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueInstant": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00))",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueInteger": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueMarkdown": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueOid": {
                                "type": "string",
                                "pattern": "urn:oid:[0-2](\\.(0|[1-9][0-9]*))+",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valuePositiveInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueTime": {
                                "type": "string",
                                "pattern": "([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueUnsignedInt": {
                                "type": "integer",
                                "format": "int32",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueUri": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueUrl": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueUuid": {
                                "type": "string",
                                "pattern": "urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueAddress": {
                                "$ref": "#/components/schemas/Address",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueAge": {
                                "$ref": "#/components/schemas/Age",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueAnnotation": {
                                "$ref": "#/components/schemas/Annotation",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueAttachment": {
                                "$ref": "#/components/schemas/Attachment",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueCoding": {
                                "$ref": "#/components/schemas/Coding",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueContactPoint": {
                                "$ref": "#/components/schemas/ContactPoint",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueCount": {
                                "$ref": "#/components/schemas/Count",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueDistance": {
                                "$ref": "#/components/schemas/Distance",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueDuration": {
                                "$ref": "#/components/schemas/Duration",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueHumanName": {
                                "$ref": "#/components/schemas/HumanName",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueIdentifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueMoney": {
                                "$ref": "#/components/schemas/Money",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valuePeriod": {
                                "$ref": "#/components/schemas/Period",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueRatio": {
                                "$ref": "#/components/schemas/Ratio",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueReference": {
                                "$ref": "#/components/schemas/Reference",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueSampledData": {
                                "$ref": "#/components/schemas/SampledData",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueSignature": {
                                "$ref": "#/components/schemas/Signature",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueTiming": {
                                "$ref": "#/components/schemas/Timing",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueContactDetail": {
                                "$ref": "#/components/schemas/ContactDetail",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueRelatedArtifact": {
                                "$ref": "#/components/schemas/RelatedArtifact",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueUsageContext": {
                                "$ref": "#/components/schemas/UsageContext",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            },
                            "valueMeta": {
                                "$ref": "#/components/schemas/Meta",
                                "description": "The actual value for the element, which must be one of the types allowed for this element."
                            }
                        },
                        "required": [
                            "label"
                        ]
                    }
                ]
            },
            "ElementDefinition_Type": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "code": {
                                "type": "string",
                                "pattern": "\\S*",
                                "description": "URL of Data type or Resource that is a(or the) type used for this element. References are URLs that are relative to http://hl7.org/fhir/StructureDefinition e.g. \"string\" is a reference to http://hl7.org/fhir/StructureDefinition/string. Absolute URLs are only allowed in logical models."
                            },
                            "profile": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "\\S*",
                                    "description": "Identifies a profile structure or implementation Guide that applies to the datatype this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference &ndash; to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the type SHALL conform to at least one profile defined in the implementation guide."
                                }
                            },
                            "targetProfile": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "\\S*",
                                    "description": "Used when the type is \"Reference\" or \"canonical\", and identifies a profile structure or implementation Guide that applies to the target of the reference this element refers to. If any profiles are specified, then the content must conform to at least one of them. The URL can be a local reference &ndash; to a contained StructureDefinition, or a reference to another StructureDefinition or Implementation Guide by a canonical URL. When an implementation guide is specified, the target resource SHALL conform to at least one profile defined in the implementation guide."
                                }
                            },
                            "aggregation": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "enum": [
                                        "contained",
                                        "referenced",
                                        "bundled"
                                    ],
                                    "description": "If the type is a reference to another resource, how the resource is or can be aggregated &ndash; is it a contained resource, or a reference, and if the context is a bundle, is it included in the bundle."
                                }
                            },
                            "versioning": {
                                "type": "string",
                                "enum": [
                                    "either",
                                    "independent",
                                    "specific"
                                ],
                                "description": "Whether this reference needs to be version specific or version independent, or whether either can be used."
                            }
                        },
                        "required": [
                            "code"
                        ]
                    }
                ]
            },
            "ElementDefinition_Base": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "path": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "The Path that identifies the base element &ndash; this matches the ElementDefinition.path for that element. Across FHIR, there is only one base definition of any element &ndash; that is, an element definition on a [StructureDefinition](structuredefinition.html#) without a StructureDefinition.base."
                            },
                            "min": {
                                "type": "integer",
                                "format": "int32",
                                "description": "Minimum cardinality of the base element identified by the path."
                            },
                            "max": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Maximum cardinality of the base element identified by the path."
                            }
                        },
                        "required": [
                            "path",
                            "min",
                            "max"
                        ]
                    }
                ]
            },
            "ElementDefinition_Slicing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "discriminator": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/ElementDefinition_Slicing_Discriminator",
                                    "description": "Designates which child elements are used to discriminate between the slices when processing an instance. If one or more discriminators are provided, the value of the child elements in the instance data SHALL completely distinguish which slice the element in the resource matches based on the allowed values for those elements in each of the slices."
                                }
                            },
                            "description": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A human&ndash;readable text description of how the slicing works. If there is no discriminator, this is required to be present to provide whatever information is possible about how the slices can be differentiated."
                            },
                            "ordered": {
                                "type": "boolean",
                                "description": "If the matching elements have to occur in the same order as defined in the profile."
                            },
                            "rules": {
                                "type": "string",
                                "enum": [
                                    "closed",
                                    "open",
                                    "openAtEnd"
                                ],
                                "description": "Whether additional slices are allowed or not. When the slices are ordered, profile authors can also say that additional slices are only allowed at the end."
                            }
                        },
                        "required": [
                            "rules"
                        ]
                    }
                ]
            },
            "ElementDefinition_Slicing_Discriminator": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "type": {
                                "type": "string",
                                "enum": [
                                    "value",
                                    "exists",
                                    "pattern",
                                    "type",
                                    "profile"
                                ],
                                "description": "How the element value is interpreted when discrimination is evaluated."
                            },
                            "path": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A FHIRPath expression, using [the simple subset of FHIRPath](fhirpath.html#simple), that is used to identify the element on which discrimination is based."
                            }
                        },
                        "required": [
                            "type",
                            "path"
                        ]
                    }
                ]
            },
            "MarketingStatus": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "country": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The country in which the marketing authorisation has been granted shall be specified It should be specified using the ISO 3166 &#8209; 1 alpha&ndash;2 code elements."
                            },
                            "jurisdiction": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Where a Medicines Regulatory Agency has granted a marketing authorisation for which specific provisions within a jurisdiction apply, the jurisdiction can be specified using an appropriate controlled terminology The controlled term and the controlled term identifier shall be specified."
                            },
                            "status": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "This attribute provides information on the status of the marketing of the medicinal product See ISO/TS 20443 for more information and examples."
                            },
                            "dateRange": {
                                "$ref": "#/components/schemas/Period",
                                "description": "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE &ldquo;Placed on the market&rdquo; refers to the release of the Medicinal Product into the distribution chain."
                            },
                            "restoreDate": {
                                "type": "string",
                                "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
                                "description": "The date when the Medicinal Product is placed on the market by the Marketing Authorisation Holder (or where applicable, the manufacturer/distributor) in a country and/or jurisdiction shall be provided A complete date consisting of day, month and year shall be specified using the ISO 8601 date format NOTE &ldquo;Placed on the market&rdquo; refers to the release of the Medicinal Product into the distribution chain."
                            }
                        },
                        "required": [
                            "country",
                            "status",
                            "dateRange"
                        ]
                    }
                ]
            },
            "Population": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "ageRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "The age of the specific population."
                            },
                            "ageCodeableConcept": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The age of the specific population."
                            },
                            "gender": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The gender of the specific population."
                            },
                            "race": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Race of the specific population."
                            },
                            "physiologicalCondition": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "The existing physiological conditions of the specific population to which this applies."
                            }
                        }
                    }
                ]
            },
            "ProductShelfLife": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "identifier": {
                                "$ref": "#/components/schemas/Identifier",
                                "description": "Unique identifier for the packaged Medicinal Product."
                            },
                            "type": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "This describes the shelf life, taking into account various scenarios such as shelf life of the packaged Medicinal Product itself, shelf life after transformation where necessary and shelf life after the first opening of a bottle, etc. The shelf life type shall be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified."
                            },
                            "period": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "The shelf life time period can be specified using a numerical value for the period of time and its unit of time measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "specialPrecautionsForStorage": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/CodeableConcept",
                                    "description": "Special precautions for storage, if any, can be specified using an appropriate controlled vocabulary The controlled term and the controlled term identifier shall be specified."
                                }
                            }
                        },
                        "required": [
                            "type",
                            "period"
                        ]
                    }
                ]
            },
            "ProdCharacteristic": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "height": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Where applicable, the height can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "width": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Where applicable, the width can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "depth": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Where applicable, the depth can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "weight": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Where applicable, the weight can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "nominalVolume": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Where applicable, the nominal volume can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "externalDiameter": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Where applicable, the external diameter can be specified using a numerical value and its unit of measurement The unit of measurement shall be specified in accordance with ISO 11240 and the resulting terminology The symbol and the symbol identifier shall be used."
                            },
                            "shape": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Where applicable, the shape can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used."
                            },
                            "color": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Where applicable, the color can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used."
                                }
                            },
                            "imprint": {
                                "type": "array",
                                "items": {
                                    "type": "string",
                                    "pattern": "[ \\r\\n\\t\\S]+",
                                    "description": "Where applicable, the imprint can be specified as text."
                                }
                            },
                            "image": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/Attachment",
                                    "description": "Where applicable, the image can be provided The format of the image attachment shall be specified by regional implementations."
                                }
                            },
                            "scoring": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Where applicable, the scoring can be specified An appropriate controlled vocabulary shall be used The term and the term identifier shall be used."
                            }
                        }
                    }
                ]
            },
            "SubstanceAmount": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "amountQuantity": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field."
                            },
                            "amountRange": {
                                "$ref": "#/components/schemas/Range",
                                "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field."
                            },
                            "amountString": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "Used to capture quantitative values for a variety of elements. If only limits are given, the arithmetic mean would be the average. If only a single definite value for a given element is given, it would be captured in this field."
                            },
                            "amountType": {
                                "$ref": "#/components/schemas/CodeableConcept",
                                "description": "Most elements that require a quantitative value will also have a field called amount type. Amount type should always be specified because the actual value of the amount is often dependent on it. EXAMPLE: In capturing the actual relative amounts of substances or molecular fragments it is essential to indicate whether the amount refers to a mole ratio or weight ratio. For any given element an effort should be made to use same the amount type for all related definitional elements."
                            },
                            "amountText": {
                                "type": "string",
                                "pattern": "[ \\r\\n\\t\\S]+",
                                "description": "A textual comment on a numeric value."
                            },
                            "referenceRange": {
                                "$ref": "#/components/schemas/SubstanceAmount_ReferenceRange",
                                "description": "Reference range of possible or expected values."
                            }
                        }
                    }
                ]
            },
            "SubstanceAmount_ReferenceRange": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/BackboneElement"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "lowLimit": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Lower limit possible or expected."
                            },
                            "highLimit": {
                                "$ref": "#/components/schemas/Quantity",
                                "description": "Upper limit possible or expected."
                            }
                        }
                    }
                ]
            }
        }
    }
}