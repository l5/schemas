{
  "type": "object",
  "properties": {
    "modifierExtension": {
      "type": "array",
      "items": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "type": "object",
        "additionalProperties": true
      }
    },
    "identifier": {
      "type": "string",
      "pattern": "\\S*",
      "description": "An identifier that uniquely identifies this expansion of the valueset, based on a unique combination of the provided parameters, the system default parameters, and the underlying system code system versions etc. Systems may re&ndash;use the same identifier as long as those factors remain the same, and the expansion is the same, but are not required to do so. This is a business identifier."
    },
    "timestamp": {
      "type": "string",
      "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
      "description": "The time at which the expansion was produced by the expanding system."
    },
    "total": {
      "type": "integer",
      "format": "int32",
      "description": "The total number of concepts in the expansion. If the number of concept nodes in this resource is less than the stated number, then the server can return more using the offset parameter."
    },
    "offset": {
      "type": "integer",
      "format": "int32",
      "description": "If paging is being used, the offset at which this resource starts.  I.e. this resource is a partial view into the expansion. If paging is not being used, this element SHALL NOT be present."
    },
    "parameter": {
      "type": "array",
      "items": {
        "description": "A parameter that controlled the expansion process. These parameters may be used by users of expanded value sets to check whether the expansion is suitable for a particular purpose, or to pick the correct expansion.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "name": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "Name of the input parameter to the $expand operation; may be a server&ndash;assigned name for additional default or other server&ndash;supplied parameters used to control the expansion process."
          },
          "valueString": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The value of the parameter."
          },
          "valueBoolean": {
            "type": "boolean",
            "description": "The value of the parameter."
          },
          "valueInteger": {
            "type": "integer",
            "format": "int32",
            "description": "The value of the parameter."
          },
          "valueDecimal": {
            "type": "number",
            "description": "The value of the parameter."
          },
          "valueUri": {
            "type": "string",
            "pattern": "\\S*",
            "description": "The value of the parameter."
          },
          "valueCode": {
            "type": "string",
            "pattern": "[^\\s]+(\\s[^\\s]+)*",
            "description": "The value of the parameter."
          },
          "valueDateTime": {
            "type": "string",
            "pattern": "([0-9]([0-9]([0-9][1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2][0-9]|3[0-1])(T([01][0-9]|2[0-3]):[0-5][0-9]:([0-5][0-9]|60)(\\.[0-9]+)?(Z|(\\+|-)((0[0-9]|1[0-3]):[0-5][0-9]|14:00)))?)?)?",
            "description": "The value of the parameter."
          }
        },
        "required": [
          "name"
        ]
      }
    },
    "contains": {
      "type": "array",
      "items": {
        "description": "The codes that are contained in the value set expansion.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "system": {
            "type": "string",
            "pattern": "\\S*",
            "description": "An absolute URI which is the code system in which the code for this item in the expansion is defined."
          },
          "abstract": {
            "type": "boolean",
            "description": "If true, this entry is included in the expansion for navigational purposes, and the user cannot select the code directly as a proper value."
          },
          "inactive": {
            "type": "boolean",
            "description": "If the concept is inactive in the code system that defines it. Inactive codes are those that are no longer to be used, but are maintained by the code system for understanding legacy data. It might not be known or specified whether an concept is inactive (and it may depend on the context of use)."
          },
          "version": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The version of the code system from this code was taken. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."
          },
          "code": {
            "type": "string",
            "pattern": "[^\\s]+(\\s[^\\s]+)*",
            "description": "The code for this item in the expansion hierarchy. If this code is missing the entry in the hierarchy is a place holder (abstract) and does not represent a valid code in the value set."
          },
          "display": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The recommended display for this item in the expansion."
          },
          "designation": {
            "type": "array",
            "items": {
              "description": "Additional representations for this item &ndash; other languages, aliases, specialized purposes, used for particular purposes, etc. These are relevant when the conditions of the expansion do not fix to a single correct representation.",
              "type": "object",
              "properties": {
                "modifierExtension": {
                  "type": "array",
                  "items": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "language": {
                  "type": "string",
                  "pattern": "[^\\s]+(\\s[^\\s]+)*",
                  "description": "The language this designation is defined for."
                },
                "use": {
                  "description": "A code that represents types of uses of designations.",
                  "type": "object",
                  "properties": {
                    "system": {
                      "type": "string",
                      "pattern": "\\S*",
                      "description": "The identification of the code system that defines the meaning of the symbol in the code."
                    },
                    "version": {
                      "type": "string",
                      "pattern": "[ \\r\\n\\t\\S]+",
                      "description": "The version of the code system which was used when choosing this code. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."
                    },
                    "code": {
                      "type": "string",
                      "pattern": "[^\\s]+(\\s[^\\s]+)*",
                      "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post&ndash;coordination)."
                    },
                    "display": {
                      "type": "string",
                      "pattern": "[ \\r\\n\\t\\S]+",
                      "description": "A representation of the meaning of the code in the system, following the rules of the system."
                    },
                    "userSelected": {
                      "type": "boolean",
                      "description": "Indicates that this coding was chosen by a user directly &ndash; e.g. off a pick list of available items (codes or displays)."
                    }
                  }
                },
                "value": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "The text value for this designation."
                }
              },
              "required": [
                "value"
              ]
            }
          },
          "contains": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": true,
              "description": "Other codes and entries contained under this entry in the hierarchy."
            }
          }
        }
      }
    }
  },
  "required": [
    "timestamp"
  ]
}