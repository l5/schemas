{
  "type": "object",
  "properties": {
    "modifierExtension": {
      "type": "array",
      "items": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "type": "object",
        "additionalProperties": true
      }
    },
    "resourceId": {
      "type": "string",
      "pattern": "[ \\r\\n\\t\\S]+",
      "description": "The id of the resource for referencing."
    },
    "resourceType": {
      "type": "string",
      "enum": [
        "ExampleScenario_Instance"
      ],
      "description": "The type of the resource."
    },
    "name": {
      "type": "string",
      "pattern": "[ \\r\\n\\t\\S]+",
      "description": "A short name for the resource instance."
    },
    "description": {
      "type": "string",
      "pattern": "[ \\r\\n\\t\\S]+",
      "description": "Human&ndash;friendly description of the resource instance."
    },
    "version": {
      "type": "array",
      "items": {
        "description": "A specific version of the resource.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "versionId": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The identifier of a specific version of a resource."
          },
          "description": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The description of the resource version."
          }
        },
        "required": [
          "versionId",
          "description"
        ]
      }
    },
    "containedInstance": {
      "type": "array",
      "items": {
        "description": "Resources contained in the instance (e.g. the observations contained in a bundle).",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "resourceId": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "Each resource contained in the instance."
          },
          "versionId": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "A specific version of a resource contained in the instance."
          }
        },
        "required": [
          "resourceId"
        ]
      }
    }
  },
  "required": [
    "resourceId",
    "resourceType"
  ]
}