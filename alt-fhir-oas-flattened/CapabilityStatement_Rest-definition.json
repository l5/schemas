{
  "type": "object",
  "properties": {
    "modifierExtension": {
      "type": "array",
      "items": {
        "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
        "type": "object",
        "additionalProperties": true
      }
    },
    "mode": {
      "type": "string",
      "enum": [
        "client",
        "server"
      ],
      "description": "Identifies whether this portion of the statement is describing the ability to initiate or receive restful operations."
    },
    "documentation": {
      "type": "string",
      "pattern": "[ \\r\\n\\t\\S]+",
      "description": "Information about the system's restful capabilities that apply across all applications, such as security."
    },
    "security": {
      "description": "Information about security implementation from an interface perspective &ndash; what a client needs to know.",
      "type": "object",
      "properties": {
        "modifierExtension": {
          "type": "array",
          "items": {
            "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
            "type": "object",
            "additionalProperties": true
          }
        },
        "cors": {
          "type": "boolean",
          "description": "Server adds CORS headers when responding to requests &ndash; this enables Javascript applications to use the server."
        },
        "service": {
          "type": "array",
          "items": {
            "description": "Types of security services that are supported/required by the system.",
            "type": "object",
            "properties": {
              "coding": {
                "type": "array",
                "items": {
                  "description": "A reference to a code defined by a terminology system.",
                  "type": "object",
                  "properties": {
                    "system": {
                      "type": "string",
                      "pattern": "\\S*",
                      "description": "The identification of the code system that defines the meaning of the symbol in the code."
                    },
                    "version": {
                      "type": "string",
                      "pattern": "[ \\r\\n\\t\\S]+",
                      "description": "The version of the code system which was used when choosing this code. Note that a well&ndash;maintained code system does not need the version reported, because the meaning of codes is consistent across versions. However this cannot consistently be assured, and when the meaning is not guaranteed to be consistent, the version SHOULD be exchanged."
                    },
                    "code": {
                      "type": "string",
                      "pattern": "[^\\s]+(\\s[^\\s]+)*",
                      "description": "A symbol in syntax defined by the system. The symbol may be a predefined code or an expression in a syntax defined by the coding system (e.g. post&ndash;coordination)."
                    },
                    "display": {
                      "type": "string",
                      "pattern": "[ \\r\\n\\t\\S]+",
                      "description": "A representation of the meaning of the code in the system, following the rules of the system."
                    },
                    "userSelected": {
                      "type": "boolean",
                      "description": "Indicates that this coding was chosen by a user directly &ndash; e.g. off a pick list of available items (codes or displays)."
                    }
                  }
                }
              },
              "text": {
                "type": "string",
                "pattern": "[ \\r\\n\\t\\S]+",
                "description": "A human language representation of the concept as seen/selected/uttered by the user who entered the data and/or which represents the intended meaning of the user."
              }
            }
          }
        },
        "description": {
          "type": "string",
          "pattern": "[ \\r\\n\\t\\S]+",
          "description": "General description of how security works."
        }
      }
    },
    "resource": {
      "type": "array",
      "items": {
        "description": "A specification of the restful capabilities of the solution for a specific resource type.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "type": {
            "type": "string",
            "enum": [
              "Account",
              "ActivityDefinition",
              "AdverseEvent",
              "AllergyIntolerance",
              "Appointment",
              "AppointmentResponse",
              "AuditEvent",
              "Basic",
              "Binary",
              "BiologicallyDerivedProduct",
              "BodyStructure",
              "Bundle",
              "CapabilityStatement",
              "CarePlan",
              "CareTeam",
              "CatalogEntry",
              "ChargeItem",
              "ChargeItemDefinition",
              "Claim",
              "ClaimResponse",
              "ClinicalImpression",
              "CodeSystem",
              "Communication",
              "CommunicationRequest",
              "CompartmentDefinition",
              "Composition",
              "ConceptMap",
              "Condition",
              "Consent",
              "Contract",
              "Coverage",
              "CoverageEligibilityRequest",
              "CoverageEligibilityResponse",
              "DetectedIssue",
              "Device",
              "DeviceDefinition",
              "DeviceMetric",
              "DeviceRequest",
              "DeviceUseStatement",
              "DiagnosticReport",
              "DocumentManifest",
              "DocumentReference",
              "DomainResource",
              "EffectEvidenceSynthesis",
              "Encounter",
              "Endpoint",
              "EnrollmentRequest",
              "EnrollmentResponse",
              "EpisodeOfCare",
              "EventDefinition",
              "Evidence",
              "EvidenceVariable",
              "ExampleScenario",
              "ExplanationOfBenefit",
              "FamilyMemberHistory",
              "Flag",
              "Goal",
              "GraphDefinition",
              "Group",
              "GuidanceResponse",
              "HealthcareService",
              "ImagingStudy",
              "Immunization",
              "ImmunizationEvaluation",
              "ImmunizationRecommendation",
              "ImplementationGuide",
              "InsurancePlan",
              "Invoice",
              "Library",
              "Linkage",
              "List",
              "Location",
              "Measure",
              "MeasureReport",
              "Media",
              "Medication",
              "MedicationAdministration",
              "MedicationDispense",
              "MedicationKnowledge",
              "MedicationRequest",
              "MedicationStatement",
              "MedicinalProduct",
              "MedicinalProductAuthorization",
              "MedicinalProductContraindication",
              "MedicinalProductIndication",
              "MedicinalProductIngredient",
              "MedicinalProductInteraction",
              "MedicinalProductManufactured",
              "MedicinalProductPackaged",
              "MedicinalProductPharmaceutical",
              "MedicinalProductUndesirableEffect",
              "MessageDefinition",
              "MessageHeader",
              "MolecularSequence",
              "NamingSystem",
              "NutritionOrder",
              "Observation",
              "ObservationDefinition",
              "OperationDefinition",
              "OperationOutcome",
              "Organization",
              "OrganizationAffiliation",
              "Parameters",
              "Patient",
              "PaymentNotice",
              "PaymentReconciliation",
              "Person",
              "PlanDefinition",
              "Practitioner",
              "PractitionerRole",
              "Procedure",
              "Provenance",
              "Questionnaire",
              "QuestionnaireResponse",
              "RelatedPerson",
              "RequestGroup",
              "ResearchDefinition",
              "ResearchElementDefinition",
              "ResearchStudy",
              "ResearchSubject",
              "Resource",
              "RiskAssessment",
              "RiskEvidenceSynthesis",
              "Schedule",
              "SearchParameter",
              "ServiceRequest",
              "Slot",
              "Specimen",
              "SpecimenDefinition",
              "StructureDefinition",
              "StructureMap",
              "Subscription",
              "Substance",
              "SubstanceNucleicAcid",
              "SubstancePolymer",
              "SubstanceProtein",
              "SubstanceReferenceInformation",
              "SubstanceSourceMaterial",
              "SubstanceSpecification",
              "SupplyDelivery",
              "SupplyRequest",
              "Task",
              "TerminologyCapabilities",
              "TestReport",
              "TestScript",
              "ValueSet",
              "VerificationResult",
              "VisionPrescription"
            ],
            "description": "A type of resource exposed via the restful interface."
          },
          "profile": {
            "type": "string",
            "pattern": "\\S*",
            "description": "A specification of the profile that describes the solution's overall support for the resource, including any constraints on cardinality, bindings, lengths or other limitations. See further discussion in [Using Profiles](profiling.html#profile&ndash;uses)."
          },
          "supportedProfile": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "\\S*",
              "description": "A list of profiles that represent different use cases supported by the system. For a server, \"supported by the system\" means the system hosts/produces a set of resources that are conformant to a particular profile, and allows clients that use its services to search using this profile and to find appropriate data. For a client, it means the system will search by this profile and process data according to the guidance implicit in the profile. See further discussion in [Using Profiles](profiling.html#profile&ndash;uses)."
            }
          },
          "documentation": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "Additional information about the resource type used by the system."
          },
          "interaction": {
            "type": "array",
            "items": {
              "description": "Identifies a restful operation supported by the solution.",
              "type": "object",
              "properties": {
                "modifierExtension": {
                  "type": "array",
                  "items": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "code": {
                  "type": "string",
                  "enum": [
                    "read",
                    "vread",
                    "update",
                    "patch",
                    "delete",
                    "history-instance",
                    "history-type",
                    "create",
                    "search-type"
                  ],
                  "description": "Coded identifier of the operation, supported by the system resource."
                },
                "documentation": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre&ndash;authorized certificates only'."
                }
              },
              "required": [
                "code"
              ]
            }
          },
          "versioning": {
            "type": "string",
            "enum": [
              "no-version",
              "versioned",
              "versioned-update"
            ],
            "description": "This field is set to no&ndash;version to specify that the system does not support (server) or use (client) versioning for this resource type. If this has some other value, the server must at least correctly track and populate the versionId meta&ndash;property on resources. If the value is 'versioned&ndash;update', then the server supports all the versioning features, including using e&ndash;tags for version integrity in the API."
          },
          "readHistory": {
            "type": "boolean",
            "description": "A flag for whether the server is able to return past versions as part of the vRead operation."
          },
          "updateCreate": {
            "type": "boolean",
            "description": "A flag to indicate that the server allows or needs to allow the client to create new identities on the server (that is, the client PUTs to a location where there is no existing resource). Allowing this operation means that the server allows the client to create new identities on the server."
          },
          "conditionalCreate": {
            "type": "boolean",
            "description": "A flag that indicates that the server supports conditional create."
          },
          "conditionalRead": {
            "type": "string",
            "enum": [
              "not-supported",
              "modified-since",
              "not-match",
              "full-support"
            ],
            "description": "A code that indicates how the server supports conditional read."
          },
          "conditionalUpdate": {
            "type": "boolean",
            "description": "A flag that indicates that the server supports conditional update."
          },
          "conditionalDelete": {
            "type": "string",
            "enum": [
              "not-supported",
              "single",
              "multiple"
            ],
            "description": "A code that indicates how the server supports conditional delete."
          },
          "referencePolicy": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "literal",
                "logical",
                "resolves",
                "enforced",
                "local"
              ],
              "description": "A set of flags that defines how references are supported."
            }
          },
          "searchInclude": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[ \\r\\n\\t\\S]+",
              "description": "A list of _include values supported by the server."
            }
          },
          "searchRevInclude": {
            "type": "array",
            "items": {
              "type": "string",
              "pattern": "[ \\r\\n\\t\\S]+",
              "description": "A list of _revinclude (reverse include) values supported by the server."
            }
          },
          "searchParam": {
            "type": "array",
            "items": {
              "description": "Search parameters for implementations to support and/or make use of &ndash; either references to ones defined in the specification, or additional ones defined for/by the implementation.",
              "type": "object",
              "properties": {
                "modifierExtension": {
                  "type": "array",
                  "items": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "name": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "The name of the search parameter used in the interface."
                },
                "definition": {
                  "type": "string",
                  "pattern": "\\S*",
                  "description": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter&ndash;definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs."
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "number",
                    "date",
                    "string",
                    "token",
                    "reference",
                    "composite",
                    "quantity",
                    "uri",
                    "special"
                  ],
                  "description": "The type of value a search parameter refers to, and how the content is interpreted."
                },
                "documentation": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms."
                }
              },
              "required": [
                "name",
                "type"
              ]
            }
          },
          "operation": {
            "type": "array",
            "items": {
              "description": "Definition of an operation or a named query together with its parameters and their meaning and type. Consult the definition of the operation for details about how to invoke the operation, and the parameters.",
              "type": "object",
              "properties": {
                "modifierExtension": {
                  "type": "array",
                  "items": {
                    "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
                    "type": "object",
                    "additionalProperties": true
                  }
                },
                "name": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called."
                },
                "definition": {
                  "type": "string",
                  "pattern": "\\S*",
                  "description": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet&ndash;expand```), that means it supports the full capabilities of the operation &ndash; e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported."
                },
                "documentation": {
                  "type": "string",
                  "pattern": "[ \\r\\n\\t\\S]+",
                  "description": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance&ndash;level invocation of the operation."
                }
              },
              "required": [
                "name",
                "definition"
              ]
            }
          }
        },
        "required": [
          "type"
        ]
      }
    },
    "interaction": {
      "type": "array",
      "items": {
        "description": "A specification of restful operations supported by the system.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "code": {
            "type": "string",
            "enum": [
              "transaction",
              "batch",
              "search-system",
              "history-system"
            ],
            "description": "Coded identifier of the operation, supported by the system resource."
          },
          "documentation": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "Guidance specific to the implementation of this operation, such as 'delete is a logical delete' or 'updates are only allowed with version id' or 'creates permitted from pre&ndash;authorized certificates only'."
          }
        },
        "required": [
          "code"
        ]
      }
    },
    "searchParam": {
      "type": "array",
      "items": {
        "description": "Search parameters that are supported for searching all resources for implementations to support and/or make use of &ndash; either references to ones defined in the specification, or additional ones defined for/by the implementation.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "name": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The name of the search parameter used in the interface."
          },
          "definition": {
            "type": "string",
            "pattern": "\\S*",
            "description": "An absolute URI that is a formal reference to where this parameter was first defined, so that a client can be confident of the meaning of the search parameter (a reference to [SearchParameter.url](searchparameter&ndash;definitions.html#SearchParameter.url)). This element SHALL be populated if the search parameter refers to a SearchParameter defined by the FHIR core specification or externally defined IGs."
          },
          "type": {
            "type": "string",
            "enum": [
              "number",
              "date",
              "string",
              "token",
              "reference",
              "composite",
              "quantity",
              "uri",
              "special"
            ],
            "description": "The type of value a search parameter refers to, and how the content is interpreted."
          },
          "documentation": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "This allows documentation of any distinct behaviors about how the search parameter is used.  For example, text matching algorithms."
          }
        },
        "required": [
          "name",
          "type"
        ]
      }
    },
    "operation": {
      "type": "array",
      "items": {
        "description": "Definition of an operation or a named query together with its parameters and their meaning and type.",
        "type": "object",
        "properties": {
          "modifierExtension": {
            "type": "array",
            "items": {
              "description": "May be used to represent additional information that is not part of the basic definition of the element and that modifies the understanding of the element in which it is contained and/or the understanding of the containing element's descendants. Usually modifier elements provide negation or qualification. To make the use of extensions safe and manageable, there is a strict set of governance applied to the definition and use of extensions. Though any implementer can define an extension, there is a set of requirements that SHALL be met as part of the definition of the extension. Applications processing a resource are required to check for modifier extensions.\n\nModifier extensions SHALL NOT change the meaning of any elements on Resource or DomainResource (including cannot change the meaning of modifierExtension itself).",
              "type": "object",
              "additionalProperties": true
            }
          },
          "name": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "The name of the operation or query. For an operation, this is the name  prefixed with $ and used in the URL. For a query, this is the name used in the _query parameter when the query is called."
          },
          "definition": {
            "type": "string",
            "pattern": "\\S*",
            "description": "Where the formal definition can be found. If a server references the base definition of an Operation (i.e. from the specification itself such as ```http://hl7.org/fhir/OperationDefinition/ValueSet&ndash;expand```), that means it supports the full capabilities of the operation &ndash; e.g. both GET and POST invocation.  If it only supports a subset, it must define its own custom [OperationDefinition](operationdefinition.html#) with a 'base' of the original OperationDefinition.  The custom definition would describe the specific subset of functionality supported."
          },
          "documentation": {
            "type": "string",
            "pattern": "[ \\r\\n\\t\\S]+",
            "description": "Documentation that describes anything special about the operation behavior, possibly detailing different behavior for system, type and instance&ndash;level invocation of the operation."
          }
        },
        "required": [
          "name",
          "definition"
        ]
      }
    },
    "compartment": {
      "type": "array",
      "items": {
        "type": "string",
        "pattern": "\\S*",
        "description": "An absolute URI which is a reference to the definition of a compartment that the system supports. The reference is to a CompartmentDefinition resource by its canonical URL ."
      }
    }
  },
  "required": [
    "mode"
  ]
}